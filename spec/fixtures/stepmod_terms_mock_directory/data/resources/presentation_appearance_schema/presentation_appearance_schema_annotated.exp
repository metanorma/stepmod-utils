(*

ISO 10303 TC184/SC4/WG12 N10472

EXPRESS Source:
ISO 10303-46 ed4 Visual presentation - Presentation appearance schema

The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
and derivations of the Schema:

Copyright ISO 2019  All rights reserved
Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
subject to the following conditions:

THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
USE OR OTHER DEALINGS IN THE SCHEMA.

In addition, any modified copy of the Schema shall include the following notice:

THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
ISO 10303-46 ed4 Visual presentation - Presentation appearance schema
AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
*)

SCHEMA presentation_appearance_schema '{iso standard 10303 part(46) version(7) object(1) presentation_appearance_schema(3)}';
 
REFERENCE FROM external_reference_schema   -- ISO 10303-41
    (externally_defined_item,
     pre_defined_item);

REFERENCE FROM geometric_model_schema   -- ISO 10303-42
    (complex_triangulated_face,
     coordinates_list,
     tessellated_edge,
     tessellated_face,
     tessellated_item,
     tessellated_shell,
     tessellated_solid,
     tessellated_surface_set,
     tessellated_vertex,
     triangulated_face);

REFERENCE FROM geometry_schema   -- ISO 10303-42
    (axis2_placement,
     b_spline_curve, 
     cartesian_point,
     composite_curve,
     curve,
     geometric_representation_item,
     point,
     polyline, 
     vector);

REFERENCE FROM group_schema   -- ISO 10303-41
  (group);

REFERENCE FROM measure_schema   -- ISO 10303-41
    (descriptive_measure,
     length_measure,
     measure_with_unit,
     plane_angle_measure,
     positive_length_measure,
     positive_ratio_measure,
     ratio_measure);

REFERENCE FROM presentation_definition_schema   -- ISO 10303-46
    (annotation_curve_occurrence,
     annotation_fill_area,
     annotation_symbol_occurrence,
     annotation_text_with_delineation,
     symbol_representation_with_blanking_box);

REFERENCE FROM presentation_organization_schema   -- ISO 10303-46
     (area_dependent_annotation_representation,
      presentation_area,
      presentation_layer_assignment,
      presentation_layer_usage,
      presentation_representation,
      presentation_set,
      presentation_view,
      product_data_representation_view,
      view_dependent_annotation_representation);

REFERENCE FROM presentation_resource_schema   -- ISO 10303-46
    (character_glyph_symbol_outline,
     character_glyph_symbol_stroke,
     colour);

REFERENCE FROM product_property_representation_schema(   -- ISO 10303-41
         context_dependent_shape_representation);
         
REFERENCE FROM representation_schema   -- ISO 10303-43
    (founded_item,
     mapped_item,
     representation,
     representation_item,
     representation_map,
     representation_or_representation_reference,
     representation_relationship,
     set_representation_item,
     using_representations);
     
REFERENCE FROM support_resource_schema   -- ISO 10303-41
    (bag_to_set,
     label);

REFERENCE FROM topology_schema   -- ISO 10303-42
    (topological_representation_item);
 
  TYPE approximation_method = ENUMERATION OF
    (chordal_deviation,
     chordal_length);
  END_TYPE;

  TYPE box_characteristic_select = SELECT
    (box_height,
     box_width,
     box_slant_angle,
     box_rotate_angle);
  END_TYPE;

  TYPE box_height = positive_ratio_measure;
  END_TYPE;

  TYPE box_rotate_angle = plane_angle_measure;
  END_TYPE;

  TYPE  box_slant_angle = plane_angle_measure;
  END_TYPE;

  TYPE box_width = positive_ratio_measure;
  END_TYPE;

  TYPE character_spacing_select = SELECT
    (length_measure,
     ratio_measure,
     measure_with_unit,
     descriptive_measure,
     pre_defined_character_spacing);
  END_TYPE;

  TYPE character_style_select = SELECT
    (character_glyph_style_stroke,
     character_glyph_style_outline,
     text_style_for_defined_font);
  END_TYPE;

  TYPE colour_type_enum = ENUMERATION OF(
    RGB8,
    RGBT8);
  END_TYPE;

  TYPE curve_font_or_scaled_curve_font_select = SELECT
    (curve_style_font_select,
     curve_style_font_and_scaling);
  END_TYPE;

  TYPE curve_or_annotation_curve_occurrence = SELECT
    (curve,
     annotation_curve_occurrence);
  END_TYPE;

  TYPE curve_or_render = SELECT
    (curve_style,
     curve_style_rendering);
  END_TYPE;

  TYPE curve_style_font_select = SELECT
    (curve_style_font,
     pre_defined_curve_font,
     externally_defined_curve_font);
  END_TYPE;

  TYPE curve_tolerance_deviation = positive_length_measure;
  END_TYPE;

  TYPE curve_tolerance_parameter = REAL;
  END_TYPE;

  TYPE direction_count_select = SELECT
    (u_direction_count,
     v_direction_count);
  END_TYPE;

  TYPE fill_style_select = SELECT
    (fill_area_style_colour,
     pre_defined_tile_style,
     externally_defined_tile_style,
     fill_area_style_tiles,
     pre_defined_hatch_style,
     externally_defined_hatch_style,
     fill_area_style_hatching,
     texture_style_specification);
  END_TYPE;

  TYPE fill_area_style_tile_shape_select = SELECT
    (fill_area_style_tile_curve_with_style,
     fill_area_style_tile_coloured_region,
     fill_area_style_tile_symbol_with_style,
     pre_defined_tile,
     externally_defined_tile);
  END_TYPE;

  TYPE hiding_or_blanking_select = SELECT
    (presentation_area,
     presentation_view,
     product_data_representation_view,
     annotation_fill_area,
     area_dependent_annotation_representation,
     view_dependent_annotation_representation,
     annotation_text_with_delineation,
     character_glyph_symbol_stroke,
     character_glyph_symbol_outline,
     symbol_representation_with_blanking_box);
  END_TYPE;

  TYPE invisibility_context = EXTENSIBLE GENERIC_ENTITY SELECT 
    (presentation_layer_usage,
     presentation_representation,
     presentation_set);
  END_TYPE;

  TYPE invisible_item = EXTENSIBLE GENERIC_ENTITY SELECT 
    (styled_item,
     presentation_layer_assignment,
     representation);
  END_TYPE;

  TYPE marker_select = SELECT
    (marker_type,
     pre_defined_marker);
  END_TYPE;

  TYPE marker_type = ENUMERATION OF
    (dot,
     x,
     plus,
     asterisk,
     ring,
     square,
     triangle);
  END_TYPE;

  TYPE null_style = ENUMERATION OF
    (null);
  END_TYPE;


  TYPE presentation_style_select = SELECT
    (pre_defined_presentation_style,
     point_style,
     curve_style,
     surface_style_usage,
     symbol_style,
     fill_area_style,  
     text_style,
     texture_style_tessellation_specification,
     approximation_tolerance,
     externally_defined_style,
     null_style);
  END_TYPE;

  TYPE product_or_presentation_space = ENUMERATION OF
    (product_shape_space,
     presentation_area_space);
  END_TYPE;

  TYPE rendering_properties_select = SELECT
    (surface_style_reflectance_ambient,
     surface_style_transparent);
  END_TYPE;

  TYPE shading_curve_method = ENUMERATION OF
    (constant_colour,
     linear_colour);
  END_TYPE;

  TYPE shading_surface_method = ENUMERATION OF
    (constant_shading,
     colour_shading,
     dot_shading,
     normal_shading);
  END_TYPE;

  TYPE size_select  = SELECT
    (positive_length_measure,
     measure_with_unit,
     descriptive_measure,
     pre_defined_size);
  END_TYPE;

  TYPE squared_or_rounded = ENUMERATION OF
    (squared,
     rounded);
  END_TYPE;

  TYPE style_context_select = SELECT
    (group,
     context_dependent_shape_representation,
     presentation_layer_assignment,
     presentation_set,
     representation,
     representation_item,
     representation_relationship);
  END_TYPE;

  TYPE styled_item_target = SELECT
    (geometric_representation_item,
     mapped_item,
     representation_or_representation_reference,
     set_representation_item,
     topological_representation_item);
  END_TYPE;

  TYPE surface_side = ENUMERATION OF
    (positive,
     negative,
     both);
  END_TYPE;

  TYPE surface_side_style_select = SELECT
    (surface_side_style,
     pre_defined_surface_side_style);
  END_TYPE;

  TYPE surface_style_element_select = SELECT
    (surface_style_fill_area,
     surface_style_boundary,
     surface_style_silhouette,
     surface_style_segmentation_curve,
     surface_style_control_grid,
     surface_style_parameter_line,
     surface_style_rendering);
  END_TYPE;

  TYPE surface_tolerance_deviation = positive_length_measure;
  END_TYPE;

  TYPE surface_tolerance_parameter = REAL;
  END_TYPE;

  TYPE symbol_style_select = SELECT
    (symbol_element_style,
     symbol_colour);
  END_TYPE;

  TYPE tessellated_face_or_tessellated_surface_set = SELECT
    (tessellated_face,
     tessellated_surface_set);
  END_TYPE; 

  TYPE  tessellated_surface_item = SELECT 
    (tessellated_face, 
     tessellated_shell,
     tessellated_solid,
     tessellated_surface_set);
  END_TYPE;

  TYPE text_justification = label;
  END_TYPE;

  TYPE texture_file_type = ENUMERATION OF
    (JPEG, 
    PNG,
    GIF,
    TIFF,
    BMP,
    DDS,
    TGA,
    other);
  END_TYPE;
  
  TYPE tolerance_deviation_select = SELECT
    (curve_tolerance_deviation,
     surface_tolerance_deviation);
  END_TYPE;

  TYPE tolerance_parameter_select = SELECT
    (curve_tolerance_parameter,
     surface_tolerance_parameter);
  END_TYPE;

  TYPE tolerance_select = SELECT
    (approximation_tolerance_deviation,
     approximation_tolerance_parameter);
  END_TYPE;

  TYPE u_direction_count = INTEGER;
    WHERE
      WR1: SELF > 1;
  END_TYPE;

  TYPE unsigned_8_bit_integer = INTEGER;
    WHERE
      WR1: { 0 <= SELF <= 255 };
  END_TYPE;

  TYPE v_direction_count = INTEGER;
    WHERE
      WR1: SELF > 1;
  END_TYPE;

  TYPE non_negative_real = REAL;
   WHERE
      WR1: 0.0 <= SELF;
  END_TYPE;  
  
  ENTITY approximation_tolerance
    SUBTYPE OF (founded_item);
      tolerance : tolerance_select;
  END_ENTITY;

  ENTITY approximation_tolerance_deviation
    SUBTYPE OF (founded_item);
      tessellation_type : approximation_method;
      tolerances        : SET [1:2] OF tolerance_deviation_select;
      definition_space  : product_or_presentation_space;
    WHERE
      WR1: (HIINDEX(tolerances) = 1)
            XOR
        (TYPEOF(tolerances[1]) <> TYPEOF(tolerances[2]));
  END_ENTITY;

  ENTITY approximation_tolerance_parameter
    SUBTYPE OF (founded_item);
      tolerances : SET [1:2] OF tolerance_parameter_select;
    WHERE
      WR1: (HIINDEX (tolerances) = 1 )
             XOR
        (TYPEOF (tolerances[1]) <> TYPEOF (tolerances[2]));
  END_ENTITY;

  ENTITY character_glyph_style_outline
    SUBTYPE OF (founded_item);
      outline_style : curve_style;
  END_ENTITY;

  ENTITY character_glyph_style_outline_with_characteristics
    SUBTYPE OF (character_glyph_style_outline);
      characteristics : fill_area_style;
  END_ENTITY;

  ENTITY character_glyph_style_stroke
    SUBTYPE OF (founded_item);
      stroke_style : curve_style;
  END_ENTITY;

  ENTITY context_dependent_invisibility
    SUBTYPE OF (invisibility);
      presentation_context : invisibility_context;
  END_ENTITY;

  ENTITY context_dependent_over_riding_styled_item
    SUBTYPE OF(over_riding_styled_item);
      style_context : LIST[1:?] OF style_context_select;
    WHERE
      WR1: 
(SIZEOF(QUERY(sc <* style_context | 'REPRESENTATION_SCHEMA.REPRESENTATION_ITEM' IN TYPEOF(sc)))= 1) OR
(SIZEOF(QUERY(sc <* style_context |
     ('REPRESENTATION_SCHEMA.MAPPED_ITEM' IN TYPEOF(sc))
  OR ('PRESENTATION_APPEARANCE_SCHEMA.CONTEXT_DEPENDENT_SHAPE_REPRESENTATION' IN TYPEOF(sc))
  OR ('REPRESENTATION_SCHEMA.REPRESENTATION_RELATIONSHIP' IN TYPEOF(sc)) ))
  = SIZEOF(style_context));     
  END_ENTITY;

  ENTITY curve_style
    SUBTYPE OF (founded_item);
      name         : label;
      curve_font   : OPTIONAL curve_font_or_scaled_curve_font_select;
      curve_width  : OPTIONAL size_select;
      curve_colour : OPTIONAL colour;
  WHERE
    WR1: EXISTS(curve_font) OR EXISTS(curve_width) OR EXISTS(curve_colour);
  END_ENTITY;

  ENTITY curve_style_curve_pattern
    SUBTYPE OF (geometric_representation_item);
      pattern        : annotation_curve_occurrence;
      pattern_length : positive_length_measure;
  END_ENTITY;

  ENTITY curve_style_curve_pattern_set
    SUBTYPE OF (curve_style_font, 
                geometric_representation_item);
      pattern_set : SET [1:?] OF curve_style_curve_pattern;
  END_ENTITY;

  ENTITY curve_style_font
    SUBTYPE OF (founded_item);
      name         : label;
      pattern_list : LIST [1:?] OF curve_style_font_pattern;
  END_ENTITY;

  ENTITY curve_style_font_and_scaling
    SUBTYPE OF (founded_item);
      name               : label;
      curve_font         : curve_style_font_select;
      curve_font_scaling : REAL;
  END_ENTITY;

  ENTITY curve_style_font_pattern
    SUBTYPE OF (founded_item);
      visible_segment_length   : positive_length_measure;
      invisible_segment_length : positive_length_measure;
  END_ENTITY;

  ENTITY curve_style_rendering;
    rendering_method     : shading_curve_method;
    rendering_properties : surface_rendering_properties;
  END_ENTITY;

  ENTITY curve_style_wide
    SUBTYPE OF (curve_style_font);
      interior_style : fill_area_style;
  END_ENTITY;

  ENTITY curve_style_with_ends_and_corners
    SUBTYPE OF (curve_style);
      curve_ends    : squared_or_rounded;
      curve_corners : squared_or_rounded;
  WHERE
    WR1: EXISTS(curve_width);
  END_ENTITY;

  ENTITY curve_style_with_extension
    SUBTYPE OF (curve_style);
      curve_extensions   : length_measure;
  WHERE
    WR1: EXISTS(curve_width);
  END_ENTITY;

  ENTITY draughting_pre_defined_curve_font
    SUBTYPE OF (pre_defined_curve_font);
    WHERE
      WR1: SELF\pre_defined_item.name IN
        ['continuous',
         'chain',
         'chain double dash',
         'dashed',
         'dotted'];
  END_ENTITY;

  ENTITY externally_defined_curve_font
    SUBTYPE OF (externally_defined_item);
  END_ENTITY;

  ENTITY externally_defined_hatch_style
    SUBTYPE OF (externally_defined_item, geometric_representation_item);
  END_ENTITY;

  ENTITY externally_defined_style
    SUBTYPE OF (externally_defined_item, founded_item);
  END_ENTITY;

  ENTITY externally_defined_tile
    SUBTYPE OF (externally_defined_item);
  END_ENTITY;

  ENTITY externally_defined_tile_style
    SUBTYPE OF (externally_defined_item, geometric_representation_item);
  END_ENTITY;

  ENTITY fill_area_style
    SUBTYPE OF (founded_item);
      name        : label;
      fill_styles : SET [1:?] OF fill_style_select;
    WHERE
      WR1: SIZEOF(QUERY(fill_style <* fill_styles |
         'PRESENTATION_APPEARANCE_SCHEMA.'+
         'FILL_AREA_STYLE_COLOUR' IN
         TYPEOF(fill_style)
         )) <= 1;
  END_ENTITY;

  ENTITY fill_area_style_colour;
    name        : label;
    fill_colour : colour;
  END_ENTITY;

  ENTITY fill_area_style_hatching
    SUBTYPE OF (geometric_representation_item);
      hatch_line_appearance         : curve_style;
      start_of_next_hatch_line      : one_direction_repeat_factor;
      point_of_reference_hatch_line : cartesian_point;
      pattern_start                 : cartesian_point;
      hatch_line_angle              : plane_angle_measure;
  END_ENTITY;

  ENTITY fill_area_style_tile_coloured_region
    SUBTYPE OF (geometric_representation_item);
      closed_curve  : curve_or_annotation_curve_occurrence;
      region_colour : colour;
    WHERE
      WR1: (NOT('GEOMETRY_SCHEMA.CURVE' IN TYPEOF (closed_curve))) OR 
        ('GEOMETRY_SCHEMA.CIRCLE' IN TYPEOF (closed_curve)) OR 
        ('GEOMETRY_SCHEMA.ELLIPSE' IN TYPEOF (closed_curve)) OR 
        ( ('GEOMETRY_SCHEMA.B_SPLINE_CURVE' IN TYPEOF (closed_curve)) 
             AND (closed_curve\b_spline_curve.closed_curve = TRUE) ) OR 
        ( ('GEOMETRY_SCHEMA.COMPOSITE_CURVE' IN TYPEOF (closed_curve)) 
             AND (closed_curve\composite_curve.closed_curve = TRUE) ) OR 
        ( ('GEOMETRY_SCHEMA.POLYLINE' IN TYPEOF (closed_curve)) 
             AND (closed_curve\polyline.points[LOINDEX(closed_curve\polyline.points)] = 
                  closed_curve\polyline.points[HIINDEX(closed_curve\polyline.points)]) );
  END_ENTITY;

  ENTITY fill_area_style_tile_curve_with_style
    SUBTYPE OF (geometric_representation_item);
      styled_curve : annotation_curve_occurrence;
  END_ENTITY;

  ENTITY fill_area_style_tile_symbol_with_style
    SUBTYPE OF (geometric_representation_item);
      symbol : annotation_symbol_occurrence;
  END_ENTITY;

  ENTITY fill_area_style_tiles
    SUBTYPE OF (geometric_representation_item);
      tiling_pattern : two_direction_repeat_factor;
      tiles          : SET [1:?] OF fill_area_style_tile_shape_select;
      tiling_scale   : positive_ratio_measure;
  END_ENTITY;

  ENTITY invisibility;
    invisible_items : SET [1:?] OF invisible_item;
  END_ENTITY;

  ENTITY occlusion_precedence;
      higher_precedence : hiding_or_blanking_select;
      lower_precedence  : hiding_or_blanking_select;
      occlusion_context : representation;
    WHERE
      WR1: acyclic_occlusion_precedence (SELF, [lower_precedence]);
  END_ENTITY;

  ENTITY one_direction_repeat_factor
    SUBTYPE OF (geometric_representation_item);
      repeat_factor : vector;
  END_ENTITY;

  ENTITY over_riding_styled_item
    SUBTYPE OF (styled_item);
      over_ridden_style : styled_item;
  END_ENTITY;

  ENTITY point_style
    SUBTYPE OF (founded_item);
      name          : label;
      marker        : OPTIONAL marker_select;
      marker_size   : OPTIONAL size_select;
      marker_colour : OPTIONAL colour;
    WHERE
     WR1 : EXISTS(marker) OR EXISTS(marker_size) OR EXISTS(marker_colour);
  END_ENTITY;

  ENTITY pre_defined_character_spacing
    SUBTYPE OF (pre_defined_item);
  END_ENTITY;

  ENTITY pre_defined_curve_font
    SUBTYPE OF (pre_defined_item);
  END_ENTITY;

  ENTITY pre_defined_hatch_style
    SUBTYPE OF (pre_defined_item, geometric_representation_item);
  END_ENTITY;

  ENTITY pre_defined_marker
    SUBTYPE OF (pre_defined_item);
  END_ENTITY;

  ENTITY pre_defined_presentation_style
    SUBTYPE OF (founded_item, pre_defined_item);
  END_ENTITY;

  ENTITY pre_defined_size
    SUBTYPE OF (pre_defined_item);
  END_ENTITY;

  ENTITY pre_defined_surface_side_style
    SUBTYPE OF (pre_defined_item);
  END_ENTITY;

  ENTITY pre_defined_tile
    SUBTYPE OF (pre_defined_item);
  END_ENTITY;

  ENTITY pre_defined_tile_style
    SUBTYPE OF (pre_defined_item, geometric_representation_item);
  END_ENTITY;

  ENTITY presentation_style_assignment
    SUBTYPE OF (founded_item);
      styles : SET [1:?] OF presentation_style_select;
    WHERE
      WR1: SIZEOF (QUERY (style1 <* styles |
           NOT (SIZEOF (QUERY (style2 <* (styles - style1) |
           NOT ((TYPEOF (style1) <> TYPEOF (style2)) OR
             (SIZEOF (['PRESENTATION_APPEARANCE_SCHEMA.' + 
                       'SURFACE_STYLE_USAGE',
                       'PRESENTATION_APPEARANCE_SCHEMA.'+
                       'EXTERNALLY_DEFINED_STYLE'] *
                     TYPEOF (style1)) = 1)
           ))) = 0
         ))) = 0;
      WR2: SIZEOF (QUERY (style1 <* styles |
         'PRESENTATION_APPEARANCE_SCHEMA.SURFACE_STYLE_USAGE' IN
         TYPEOF(style1)
         )) <= 2;
      WR3: SIZEOF (QUERY (style1 <* styles |
         ('PRESENTATION_APPEARANCE_SCHEMA.SURFACE_STYLE_USAGE' IN TYPEOF (style1)) AND 
         (SIZEOF (QUERY (style2 <* (styles - style1) |
           ('PRESENTATION_APPEARANCE_SCHEMA.SURFACE_STYLE_USAGE' IN TYPEOF (style2)) AND 
           ((style1\surface_style_usage.side = both) OR 
           (style2\surface_style_usage.side = both) OR 
           (style1\surface_style_usage.side = style2\surface_style_usage.side)) )) > 0))) = 0;
  END_ENTITY;

  ENTITY presentation_style_by_context
    SUBTYPE OF (presentation_style_assignment);
      style_context : style_context_select;
  END_ENTITY;

  ENTITY symbol_colour;
    colour_of_symbol : colour;
  END_ENTITY;

  ENTITY symbol_element_style
    SUBTYPE OF (founded_item);
      style_of_symbol : presentation_style_assignment;
    WHERE
      WR1: SIZEOF (QUERY ( style <* style_of_symbol\presentation_style_assignment.styles |
           'PRESENTATION_APPEARANCE_SCHEMA.SYMBOL_STYLE' IN
           TYPEOF (style))) = 0;
      WR2: NOT ('PRESENTATION_APPEARANCE_SCHEMA.' +
                'PRESENTATION_STYLE_BY_CONTEXT' IN
              TYPEOF (style_of_symbol)
           );
  END_ENTITY;

  ENTITY symbol_style
    SUBTYPE OF (founded_item);
      name            : label; 
      style_of_symbol : symbol_style_select;
  END_ENTITY;

  ENTITY styled_item
    SUBTYPE OF (representation_item);
      styles :  SET [0:?] OF presentation_style_assignment;
      item   :  styled_item_target; 
    WHERE
      WR1: (SIZEOF(styles) = 0) AND ( 'PRESENTATION_APPEARANCE_SCHEMA.STYLED_TESSELLATED_ITEM_WITH_COLOURS' IN TYPEOF(self))
           OR
           (SIZEOF(styles) = 1)
           OR
           (SIZEOF(styles) > 1) AND (SIZEOF(QUERY(pres_style <* styles | NOT ('PRESENTATION_APPEARANCE_SCHEMA.' + 'PRESENTATION_STYLE_BY_CONTEXT' IN TYPEOF(pres_style)))) = 0);
      WR2: NOT ('PRESENTATION_APPEARANCE_SCHEMA.STYLED_ITEM' IN TYPEOF(item));
      WR3: ('REPRESENTATION_SCHEMA.MAPPED_ITEM' IN TYPEOF(item)) OR
           ('GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF(item)) OR
           (('REPRESENTATION_SCHEMA.SET_REPRESENTATION_ITEM' IN TYPEOF(item)) AND 
            (SIZEOF(QUERY (it <* item | NOT
            (('REPRESENTATION_SCHEMA.MAPPED_ITEM' IN TYPEOF(it)) OR 
             ('GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF(it)))
                   )) = 0)); 
  END_ENTITY;

   ENTITY styled_tessellated_item_with_colours 
     SUBTYPE OF (styled_item);
     SELF\styled_item.item : tessellated_surface_item;
     colour_type : colour_type_enum;
     colour_values : LIST[1:?] OF LIST[3:4] OF unsigned_8_bit_integer;
   DERIVE
     coloured_coordinate_values : coordinates_list := get_coordinate_values(item );
   WHERE
     WR1 : SIZEOF(SELF\styled_item.styles)= 0;
     WR2 : ((colour_type = RGB8) AND (SIZEOF(QUERY(clist <* colour_values | NOT (SIZEOF(clist) = 3)))= 0)) OR
           ((colour_type = RGBT8) AND (SIZEOF(QUERY(clist <* colour_values | NOT (SIZEOF(clist) = 4)))= 0));
     WR3 : SIZEOF(colour_values) = coloured_coordinate_values\coordinates_list.npoints;
  END_ENTITY;
 
  ENTITY surface_rendering_properties;
    rendered_colour : colour;
  END_ENTITY;

  ENTITY surface_side_style
    SUBTYPE OF (founded_item);
      name   : label;
      styles : SET [1:7] OF surface_style_element_select;
    WHERE
      WR1: SIZEOF(QUERY( style1 <* styles |
           SIZEOF(QUERY( style2 <* styles - style1 |
           TYPEOF(style1) = TYPEOF(style2)
           )) > 0
           )) = 0;
  END_ENTITY;

  ENTITY surface_style_boundary
    SUBTYPE OF (founded_item);
      style_of_boundary : curve_or_render;
  END_ENTITY;

  ENTITY surface_style_control_grid
    SUBTYPE OF (founded_item);
      style_of_control_grid : curve_or_render;
  END_ENTITY;

  ENTITY surface_style_fill_area
    SUBTYPE OF (founded_item);
      fill_area : fill_area_style;
  END_ENTITY;

  ENTITY surface_style_parameter_line
    SUBTYPE OF (founded_item);
      style_of_parameter_lines : curve_or_render;
      direction_counts         : SET [1:2] OF direction_count_select;
    WHERE
      WR1: (HIINDEX(direction_counts) = 1)
                        XOR
         (TYPEOF(direction_counts[1]) <>
          TYPEOF(direction_counts[2]));
  END_ENTITY;

  ENTITY surface_style_reflectance_ambient;
    ambient_reflectance : REAL;
  END_ENTITY;

  ENTITY surface_style_reflectance_ambient_diffuse
    SUBTYPE OF (surface_style_reflectance_ambient);
      diffuse_reflectance : REAL;
  END_ENTITY;

  ENTITY surface_style_reflectance_ambient_diffuse_specular
    SUBTYPE OF (surface_style_reflectance_ambient_diffuse);
      specular_reflectance : REAL;
      specular_exponent    : REAL;
      specular_colour      : colour;
  END_ENTITY;

  ENTITY surface_style_rendering;
    rendering_method : shading_surface_method;
    surface_colour   : colour;
  END_ENTITY;

  ENTITY surface_style_rendering_with_properties
    SUBTYPE OF (surface_style_rendering);
      properties : SET [1:2] OF rendering_properties_select;
    WHERE
      WR1: (HIINDEX(properties) = 1)
                   XOR
         (TYPEOF(properties[1]) <> TYPEOF(properties[2]));
  END_ENTITY;

  ENTITY surface_style_segmentation_curve
    SUBTYPE OF (founded_item);
      style_of_segmentation_curve : curve_or_render;
  END_ENTITY;

  ENTITY surface_style_silhouette
    SUBTYPE OF (founded_item);
      style_of_silhouette : curve_or_render;
  END_ENTITY;

  ENTITY surface_style_transparent;
      transparency : REAL;
    WHERE
      WR1: {0.0 <= transparency <= 1.0};
  END_ENTITY;

  ENTITY surface_style_usage
    SUBTYPE OF (founded_item);
      side  : surface_side;
      style : surface_side_style_select;
  END_ENTITY;

  ENTITY styled_tessellated_face_or_surface_with_single_texture
	SUBTYPE OF (styled_item);  
  		SELF\styled_item.styles : SET [1:1] OF presentation_style_assignment;
		SELF\styled_item.item    : tessellated_face_or_tessellated_surface_set;
    DERIVE
      texture_style_specification : texture_style_tessellation_specification := styles[LOINDEX(styles)]\presentation_style_assignment.styles[LOINDEX(styles)];
    WHERE
     WR1: ('PRESENTATION_APPEARANCE_SCHEMA.SINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION' IN TYPEOF(styles[LOINDEX(styles)]\presentation_style_assignment.styles[LOINDEX(styles)]))
          AND (SIZEOF(styles[LOINDEX(styles)]\presentation_style_assignment.styles) = 1);
     WR2: NOT ('GEOMETRIC_MODEL_SCHEMA.TRIANGULATED_FACE' IN TYPEOF(item))
          OR
           ((
            ((SIZEOF(item\triangulated_face.pnindex) > 0) AND (SIZEOF(texture_style_specification\single_texture_style_tessellation_specification.texture_coordinates) = SIZEOF(item\triangulated_face.pnindex))))
            OR
            ((SIZEOF(item\triangulated_face.pnindex) = 0) AND (SIZEOF(texture_style_specification\single_texture_style_tessellation_specification.texture_coordinates) = item\tessellated_face.coordinates\coordinates_list.npoints)));
    WR3: NOT ('GEOMETRIC_MODEL_SCHEMA.COMPLEX_TRIANGULATED_FACE' IN TYPEOF(item))
         OR
            ((SIZEOF(item\complex_triangulated_face.pnindex) > 0) AND (SIZEOF(texture_style_specification\single_texture_style_tessellation_specification.texture_coordinates) = SIZEOF(item\complex_triangulated_face.pnindex)))
            OR
            ((SIZEOF(item\complex_triangulated_face.pnindex) = 0) AND (SIZEOF(texture_style_specification\single_texture_style_tessellation_specification.texture_coordinates) = item\tessellated_face.coordinates\coordinates_list.npoints));
    WR4: NOT ('GEOMETRIC_MODEL_SCHEMA.TESSELLATED_SURFACE_SET' IN TYPEOF(item))
         OR
         (SIZEOF(texture_style_specification\single_texture_style_tessellation_specification.texture_coordinates) = item\tessellated_surface_set.coordinates\coordinates_list.npoints);    
  END_ENTITY;
  
  ENTITY text_style
    SUBTYPE OF (founded_item);
      name                 : label;
      character_appearance : character_style_select;
  END_ENTITY;

  ENTITY text_style_for_defined_font;
    text_colour : colour;
  END_ENTITY;

  ENTITY text_style_with_box_characteristics
    SUBTYPE OF (text_style);
      characteristics : SET [1:4] OF box_characteristic_select;
    WHERE
      WR1: SIZEOF( QUERY( c1 <* characteristics |
           SIZEOF( QUERY( c2 <* characteristics - c1 |
           TYPEOF (c1) = TYPEOF (c2)
           )) > 0
           )) = 0;
  END_ENTITY;

  ENTITY text_style_with_justification
    SUBTYPE OF (text_style);
      justification : text_justification;
  END_ENTITY;

  ENTITY text_style_with_mirror
    SUBTYPE OF (text_style);
      mirror_placement : axis2_placement;
  END_ENTITY;

  ENTITY text_style_with_spacing
    SUBTYPE OF (text_style);
      character_spacing : character_spacing_select;
  END_ENTITY;

  ENTITY texture_style_specification
  	ABSTRACT SUPERTYPE
  	SUBTYPE OF (founded_item);
  END_ENTITY;
  
  ENTITY texture_style_tessellation_specification
     ABSTRACT SUPERTYPE
     SUBTYPE OF (texture_style_specification);
  END_ENTITY;
  
  ENTITY single_texture_style_tessellation_specification
     SUBTYPE OF (texture_style_tessellation_specification);
     texture_image: label;
     texture_coordinates: LIST [1:?] OF LIST [2:2] OF non_negative_real;
     texture_format: texture_file_type;
     repeating_pattern: BOOLEAN;
  END_ENTITY;

  ENTITY two_direction_repeat_factor
    SUBTYPE OF (one_direction_repeat_factor);
      second_repeat_factor : vector;
  END_ENTITY;

  SUBTYPE_CONSTRAINT founded_item_subtypes FOR founded_item;
    ONEOF (approximation_tolerance,
      approximation_tolerance_deviation,
      approximation_tolerance_parameter,
      character_glyph_style_outline,
      character_glyph_style_stroke,
      curve_style,
      curve_style_font,
      curve_style_font_and_scaling,
      curve_style_font_pattern,
      externally_defined_style,
      fill_area_style,
      point_style,
      pre_defined_presentation_style,
      presentation_style_assignment,
      surface_side_style,
      surface_style_boundary,
      surface_style_control_grid,
      surface_style_fill_area,
      surface_style_parameter_line,
      surface_style_segmentation_curve,
      surface_style_silhouette,
      surface_style_usage,
      symbol_element_style,
      symbol_style,
      text_style);
  END_SUBTYPE_CONSTRAINT;

  SUBTYPE_CONSTRAINT pas_geometric_representation_item_subtypes FOR geometric_representation_item;  
    (ONEOF ( 
     curve, 
     curve_style_curve_pattern, 
     curve_style_curve_pattern_set ,
     externally_defined_hatch_style,
     externally_defined_tile_style,  
     fill_area_style_hatching,
     fill_area_style_tile_coloured_region,
     fill_area_style_tile_curve_with_style, 
     fill_area_style_tile_symbol_with_style, 
     fill_area_style_tiles, 
     one_direction_repeat_factor,
     point, 
     pre_defined_hatch_style,  
     pre_defined_tile_style, 
     vector)); 
  END_SUBTYPE_CONSTRAINT; 

  FUNCTION acyclic_occlusion_precedence
       ( relation : occlusion_precedence;
     set_of_lower : SET OF hiding_or_blanking_select ) : BOOLEAN;
    LOCAL
      x : SET OF occlusion_precedence;
      local_set_of_lower : SET OF hiding_or_blanking_select;
    END_LOCAL;
    REPEAT i:=1 TO HIINDEX(set_of_lower);
      IF relation.higher_precedence :=: set_of_lower[i] THEN
        RETURN(FALSE);
      END_IF;
    END_REPEAT;
    x := bag_to_set (USEDIN ( relation.higher_precedence,
                   'PRESENTATION_APPEARANCE_SCHEMA.'+
           'OCCLUSION_PRECEDENCE.LOWER_PRECEDENCE'));
    local_set_of_lower := set_of_lower + relation.higher_precedence;
    IF SIZEOF (x) > 0 THEN
      REPEAT i:=1 TO HIINDEX (x);
        IF NOT acyclic_occlusion_precedence(x[i] ,
                                     local_set_of_lower) THEN
            RETURN (FALSE);
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN (TRUE);
  END_FUNCTION;

 FUNCTION get_coordinate_values
  (source : tessellated_surface_item) : coordinates_list; 
 LOCAL
      coordinate_values : coordinates_list;
      max : INTEGER;
 END_LOCAL;
       (* If source is of type tessellated_face its single coordinates_list is returned *)  
    CASE TRUE OF
    'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_FACE' IN TYPEOF(source): --first case 
    BEGIN
      coordinate_values := source\tessellated_face.coordinates;
      RETURN(coordinate_values);
    END;
       (* If source is of type tessellated_surface_set its single coordinates_list is returned *)  
   'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_SURFACE_SET' IN TYPEOF(source): --second case
    BEGIN
      coordinate_values := source\tessellated_surface_set.coordinates;
      RETURN(coordinate_values);
    END;    
       (* For complex cases of tessellated_solid or tessellated_shell multiple coordinates_lists
        may occur. A valid return is only possible if a single coordinates_list is used for all components of the shell or solid *)
       (*  A tessellated_solid, or tessellated_shell  has a SET of teessellated_structured_items which must be inspected, the local variable coordinate_values is 
        set to the coordinates_list referenced by items[1] and is later compared to other referenced coordinates_lists *)
   'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_SOLID' IN TYPEOF(source): -- third case
    BEGIN
      IF 'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_FACE' IN TYPEOF(source\tessellated_solid.items[1]) THEN
        coordinate_values := source\tessellated_solid.items[1]\tessellated_face.coordinates;
      END_IF;
     IF 'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_EDGE' IN TYPEOF(source\tessellated_solid.items[1]) THEN
       coordinate_values := source\tessellated_solid.items[1]\tessellated_edge.coordinates;
     END_IF;
     IF 'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_VERTEX' IN TYPEOF(source\tessellated_solid.items[1]) THEN
       coordinate_values := source\tessellated_solid.items[1]\tessellated_vertex.coordinates;
     END_IF;
     max := SIZEOF(source\tessellated_solid.items);
      IF   max = 1 THEN 
       RETURN(coordinate_values);
     (* simple case with only 1 item in the list *)
      ELSE REPEAT i := 2 TO max;
       (* check that each item on the list references the same coordintes_list as items[1], if NOT rerurn ? *) 
        IF 'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_FACE' IN TYPEOF(source\tessellated_solid.items[i]) THEN
          IF NOT(coordinate_values :=: source\tessellated_solid.items[i]\tessellated_face.coordinates) THEN 
           RETURN (?);
          END_IF;  
        END_IF;
        IF 'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_EDGE' IN TYPEOF(source\tessellated_solid.items[i]) THEN
          IF NOT(coordinate_values :=: source\tessellated_solid.items[i]\tessellated_edge.coordinates) THEN
           RETURN(?);
          END_IF;
        END_IF;  
        IF 'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_VERTEX' IN TYPEOF(source\tessellated_solid.items[i]) THEN
         IF NOT(coordinate_values :=: source\tessellated_solid.items[i]\tessellated_vertex.coordinates) THEN
           RETURN(?);
         END_IF;  
       END_IF; 
     END_REPEAT;
     RETURN(coordinate_values);
      (* all items referenced by the tessellated_solid share the same coordinates list which is now returned. *) 
    END_IF;
  END;   
      (* tessellated_shell has a SET of tessellated_structured_items which must be inspected *)
   'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_SHELL' IN TYPEOF(source): --fourth case
    BEGIN
        IF 'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_FACE' IN TYPEOF(source\tessellated_shell.items[1]) THEN
         coordinate_values := source\tessellated_shell.items[1]\tessellated_face.coordinates;
        END_IF;
       IF 'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_EDGE' IN TYPEOF(source\tessellated_shell.items[1]) THEN
         coordinate_values := source\tessellated_shell.items[1]\tessellated_edge.coordinates;
       END_IF;
       IF 'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_VERTEX' IN TYPEOF(source\tessellated_shell.items[1]) THEN
        coordinate_values := source\tessellated_shell.items[1]\tessellated_vertex.coordinates;
       END_IF;
       max := SIZEOF(source\tessellated_shell.items);
       IF  max = 1 THEN RETURN(coordinate_values);
       (* simple case with only 1 item in the list *)
       ELSE REPEAT i := 2 TO max;
        (* check that each item on the list references the same coordinates_list as item[1], if NOT rerurn ? *) 
        IF 'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_FACE' IN TYPEOF(source\tessellated_shell.items[i]) THEN
         IF NOT(coordinate_values :=: source\tessellated_shell.items[i]\tessellated_face.coordinates) THEN 
           RETURN (?);
         END_IF;  
        END_IF;
        IF 'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_EDGE' IN TYPEOF(source\tessellated_shell.items[i]) THEN
          IF NOT (coordinate_values :=: source\tessellated_shell.items[i]\tessellated_edge.coordinates) THEN
            RETURN(?);
          END_IF;
        END_IF;  
        IF 'GEOMETRIC_MODEL_SCHEMA.TESSELLATED_VERTEX' IN TYPEOF(source\tessellated_shell.items[i]) THEN
         IF NOT (coordinate_values :=: source\tessellated_shell.items[i]\tessellated_vertex.coordinates) THEN
           RETURN(?);
         END_IF;  
        END_IF; 
      END_REPEAT;
      RETURN(coordinate_values);
       (* all items referenced by the tessellated_shell share the same coordinates_list which is now returned. *) 
     END_IF;
   END;
   END_CASE;
 END_FUNCTION; 
 END_SCHEMA; 

(*"presentation_appearance_schema.__published_in"
ISO 10303-46:2021 ED5
*)

(*"presentation_appearance_schema.__identifier"
ISO/TC 184/SC 4/WG 12 N10472
*)

(*"presentation_appearance_schema.__supersedes"
ISO/TC 184/SC 4/WG 12 N9771
*)

(*"presentation_appearance_schema.__status"
IS
*)

(*"presentation_appearance_schema.__title"
visual_presentation
*)


(*"presentation_appearance_schema"
// express surpersedes combined number.supersedes="6141"

// Note schema EXPRESS are in ..\resources\resource_name name_of_schema.xml

// 6.1 Introduction

The subject of the *presentation_appearance_schema* is the specification of the intended graphical appearance of a presented picture. The *presentation_appearance_schema* also defines the mechanism which allows the appropriate association of these appearance attributes with *annotation_occurrences* in the context of a *presentation_representation*. Thus, the context of the *presentation_representation* can be used to determine the appearance of different kinds of elements in the picture.

// 6.2 Fundamental concepts and assumptions

*)
(*"presentation_appearance_schema.__fund_cons"

// Assignment of presentation style
*_Assignment of presentation style_*

The *presentation_appearance_schema* allows the association of appearance attributes with selected annotation primitives and with product shape elements. In this part of ISO 10303, presentation style can be assigned to any *representation_item*. A style assignment is made by instantiating a *styled_item* which refers to a *representation_item* together with its *presentation_style_assignment*. A *presentation_style_assignment* itself is a collection of different presentation styles such as point style, curve style, or text style. Styling an unstyled *representation_item* produces a new *representation_item* which has presentation style assigned. The *presentation_style_assignment* of a *styled_item* affects the appearance of the referenced *representation_item* as well as the appearance of all *representation_item*s referenced directly or indirectly by that item. Only those *representation_item*s are affected which are not already styled. This means styling a styled *representation_item* has no effect, styling a partially styled *representation_item* affects only the appearance of the unstyled parts, and styling an unstyled *representation_item* affects the appearance of the whole item. Only styled *representation_item*s may be presented. Whether they are actually presented depends on several other facts, like layer invisibility and *invisibility*, hidden line and surface removal, as well as clipping. This part of ISO 10303 does not make any statement about the effect if style conflicts occurs. A style conflict occurs, for example, when a *representation_item* is used by several *styled_item*s.

A *presentation_style_assignment* is used to assign style to a *representation_item* independently from any presentation context. A subtype of *presentation_style_assignment*, the *presentation_style_by_context*, allows the assignment of style for a specific presentation context. A presentation context can be any *presentation_set*, *representation*, or *representation_item*. In the last case, a style can be assigned to an item as a whole, and a different style can be assigned to a part of that item.

A style assignment can be over-ridden by an *over_riding_styled_item*. A subtype of *over_riding_styled_item*, the *context_dependent_over_riding_styled_item*, allows the over-riding of a style for a specific presentation context.

// Types of presentation styles
*_Types of presentation styles_*

For each annotation primitive defined in the *presentation_definition_schema*, a special group of styles exist. These groups are point styles, curve styles, fill area styles, surface styles, text styles, and symbol styles. This part of ISO 10303 does not restrict style assignment to product shape elements. For example, it allows the assignment of surface style to a point. However, only appropriate styles affect the appearance of the product shape element; i.e., surface styles only affect surfaces, fill area styles and curve styles only affect curves, and point styles only affect points, curves, and surfaces. For high-level product shape elements such as solid models, the using Application Protocol has to specify which styles affect the appearance of these elements. Nevertheless, the style assignment for annotation primitives is more restrictive. Details on these restrictions can be found in clause 5 subtypes of *annotation_occurrence*.

Presentation styles can be specified using the resources of this schema, can be externally defined, or can be pre-defined by Application Protocols. The presentation styles defined in this schema include the following.

Point styles provide the resources to specify the visual appearance of points. They allow the specification of the marker symbol, marker size, and colour to be used for presenting points. Point styles can be specified by the entity *point_style*.

Curve styles provide the resources to specify the visual appearance of curves. They allow the specification of curve fonts, curve width, appearance of curve ends and corners, colour, or patterns for filling visible curve segments. A curve font specifies whether a curve shall be drawn using solid, dashed, or dotted lines. The *presentation_appearance_schema* allows the specification of arbitrary patterns for curve fonts and the usage of externally defined or pre-defined curve fonts. The entities used for the definition of curve fonts are *externally_defined_curve_font*, *pre_defined_curve_font*, *curve_style_font*, *curve_style_font_pattern*, and *curve_style_font_and_scaling*. The curve width can be specified as measure or pre-defined size. Curve ends and corners may be drawn squared or rounded, and extension or shortage can be specified for curve ends. The entities supporting this structure are *curve_style_with_ends_and_corners* and *curve_style_with_extension*. A *curve_style_wide* allows the specification of a fill area style which is used for filling visible curve segments. This has been included to meet draughting requirements for the presentation of curves. The *curve_style_rendering* controls the rendering of curves on a surface and is described together with surface styles.

Fill area styles provide the resources to specify the visual appearance of annotation fill areas. They allow the specification of a solid colour, hatches, or tiling patterns. The *fill_area_style_colour* can be used to specify a solid colour that is used for presenting a fill area. The hatching patterns can be composed of sets of parallel lines with arbitrary angle. Alternatively, hatching patterns may be externally defined or pre-defined. The entities for hatches are *fill_area_style_hatching*, *pre_defined_hatch_style*, *externally_defined_ hatch_style*, and *one_direction_repeat_factor*. The tiling patterns can be made of curves, coloured regions, or symbols. Alternatively, tiling pattern may be externally defined or pre-defined. Tiling patterns are repeated in two directions which are specified by arbitrary vectors. The entities for the definition of tiling patterns are *pre_defined_tile_style*, *externally_defined_tile_style*, *fill_area_style_tiles*, *fill_area_style_tile_curve_with_style*, *fill_area_style_tile_coloured_region*, *fill_area_style_tile_symbol_with_style*, *pre_defined_tile*, *externally_defined_tile*, and *two_direction_repeat_factor*.

Surface styles provide the resources to specify the visual appearance of surfaces. Separate surface styles may be applied to each side of a surface, or the same surface styles can be used for both sides. The surface style usage specifies a surface side style for one or both sides of a surface. Entities for the assignment of style to sides of a surface are *surface_style_usage* and *surface_side_style*. A surface side style may be any combination of fill area style, boundary style, silhouette style, segmentation curve style, control grid style, parameter line style, or rendering style.

A fill area style specifies a solid colour, hatches, or a tiling pattern for filling the side of a surface.

A boundary style specifies a curve style or a rendering method and properties for presenting the boundary curves of a surface. If no boundary style is specified, the boundary curves shall not be presented.

A silhouette style specifies a curve style or a rendering method and properties for presenting the silhouette curves of a surface. If no silhouette style is specified, silhouette curves shall not be presented.

A segmentation curve style specifies a curve style or a rendering method and properties for presenting the segmentation curves of a surface. This style affects only surfaces which are divided into segments such as *B*-spline surfaces. If no segmentation curve style is specified, segmentation curves shall not be presented.

A control grid style specifies a curve style or a rendering method and properties for presenting the mesh of control points which are used for the definition of a surface. This style affects only surfaces which are defined over a mesh of control points, such as *B*-spline surfaces. If no control grid style is specified, the control grid shall not be presented.

A parameter line style specifies a curve style or a rendering method and properties for presenting iso-parameter lines of a surface. The number of parameter lines in each parameter direction has to be specified for this style. If no parameter line style is specified, the parameter lines shall not be presented.

The entities defining these surface styles are *surface_fill_area*, *surface_style_boundary*, *surface_style_silhouette*, *surface_style_segmentation_curve*, *surface_style_control_grid*, and *surface_style_parameter_line*.

The entities *curve_style_rendering* and *surface_rendering_properties* specify the rendering method and properties for curves on a surface. A rendering style specifies the method which shall be used for rendering the surface. If this style is specified, surface rendering using reflectance calculations is performed for presenting the surface. For this style, a colour shall be specified for the surface. Additional rendering properties including transparency and ambient, diffuse, and specular reflectance coefficients can optionally be specified. The entities for rendering styles are *surface_style_rendering*, *surface_style_rendering_with_properties*, *surface_style_transparent*, *surface_style_reflectance_ambient*, *surface_style_reflectance_ambient_diffuse*, and *surface_style_reflectance_ambient_diffuse_specular*. Besides those styles listed above, surface styles may also be pre-defined.

Text styles provide the resources to specify the visual appearance of annotation text. Text justification, box characteristics, character spacing, and mirror axis affect the appearance of the whole text, while character glyph style affects the appearance of the individual characters or symbols which make up the text. Text justification specifies how the text is aligned. The supported types of alignment are specified by Application Protocols. The box characteristics specify the geometry of the character box. The character box is a parallelogram for which the width, height, slant angle, and rotation angle may be specified. Text spacing defines the spacing which shall be included between adjacent character boxes of a string, in addition to the spacing included in the font definition. Text mirroring specifies a mirror axis which shall be used for mirroring the text. Mirroring shall be performed after all remaining text styles have been applied. The entities supporting the definition of these text styles are *text_style*, *text_style_with_spacing*, *text_style_with_mirror*, *text_style_with_justification*, and *text_style_with_box_characteristics*. A character glyph style may be an outline style, stroke style, or only a text colour. An outline style is a curve style that is used for presenting the outlines which make up a character glyph. Optionally, a fill area style for filling the outlines may be specified. An outline style affects only character glyphs which are defined by outlines. A stroke style is a curve style that is used for presenting the strokes which make up a character glyph. A stroke style affects only character glyphs which are defined by strokes. For pre-defined and externally defined fonts, only a colour shall be specified. The entities supporting the definition of these character glyph styles are *character_glyph_style_stroke*, *character_glyph_style_outline*, *character_glyph_style_outline_with_characteristics*, and *text_style_for_defined_font*.

Symbol styles provide the resources to specify the visual appearance of annotation symbols. A symbol style is an arbitrary collection of point styles, curve styles, fill area styles, surface styles, and text styles. The entities supporting the definition of these symbol styles are *symbol_style*, *symbol_element_style*, and *symbol_colour*.

// Approximation tolerances
*_Approximation tolerances_*

Approximation tolerances specify the allowable tolerances between the shape of the presented elements and their mathematically exact position and shape. Approximation tolerances apply to curves and surfaces and can be specified in parameter space, product shape space, or presentation area space. The space in which the tolerances are specified depends on the approximation method used. For the chordal deviation and chordal length approximation methods, the tolerance can be specified in product-shape or presentation-area space. For the parameter approximation method, the tolerance shall be specified in parameter space.

// Occlusion and invisibility
*_Occlusion and invisibility_*

The *presentation_appearance_schema* provides resources to specify the intended appearance of items which hide each other because they overlap in two-dimensional space. Those items include the elements of the presentation hierarchy which are defined in clause 4 in this part of ISO 10303, *annotation_fill_area*s, annotation texts with delineations, character glyphs, and symbols. For this purpose, an *occlusion_precedence* can be specified for any two of these items.

In addition, the *presentation_appearance_schema* provides resources to specify the invisibility of *styled_item*s or layers.

// Surface vIsual texture
*_Surface vIsual texture_*

The *presentation_appearance_schema* provides resources to specify an external image association to tessellated geometry, in particular to *Tessellated_face* and *Tessellated_surface_set*.

// Vertex colours for tessellated geometry
*_Vertex colours for tessellated geometry_*

The *presentation_appearance_schema* provides resources to specify association of colour information with vertices of tessellated geometry elements, in particular vertices of a *Tessellated_face*, *Tessellated_surface_set*, *Tessellated_shell*, and *Tessellated_solid*. Colour information is specified using integer triples to represent RGB colours or integer quadruples to represent RGB colour values with transparency.

// EXPRESS-G

*)
(*"presentation_appearance_schema.__expressg"
[[presentation_appearance_schemaexpg1]]
[.svgmap]
====
image::presentation_appearance_schemaexpg1.svg[]

* <<express:product_property_representation_schema>>; 1
* <<express:presentation_appearance_schema>>; 2
* <<express:support_resource_schema>>; 3
* <<express:presentation_definition_schema>>; 4
* <<express:geometry_schema>>; 5
* <<express:external_reference_schema>>; 6
* <<express:presentation_resource_schema>>; 7
* <<express:topology_schema>>; 8
* <<express:geometric_model_schema>>; 9
* <<express:presentation_organization_schema>>; 10
* <<express:representation_schema>>; 11
* <<express:measure_schema>>; 12
* <<express:group_schema>>; 13
====

*)
(*"presentation_appearance_schema.__expressg"
[[presentation_appearance_schemaexpg2]]
[.svgmap]
====
image::presentation_appearance_schemaexpg2.svg[]

* <<express:presentation_appearance_schema.character_spacing_select>>; 1
* <<express:presentation_appearance_schema.character_style_select>>; 2
* <<express:presentation_appearance_schema.box_characteristic_select>>; 3
* <<express:presentation_appearance_schemaexpg5>>; 4
* <<express:presentation_appearance_schemaexpg7>>; 5
* <<express:presentation_appearance_schemaexpg7>>; 6
* <<express:presentation_appearance_schemaexpg5>>; 7
* <<express:presentation_appearance_schemaexpg5>>; 8
* <<express:presentation_appearance_schemaexpg9>>; 9
* <<express:presentation_appearance_schemaexpg8>>; 10
* <<express:presentation_appearance_schemaexpg10>>; 11
* <<express:presentation_appearance_schemaexpg9>>; 12
* <<express:presentation_appearance_schemaexpg3>>; 13
* <<express:presentation_appearance_schemaexpg3>>; 14
* <<express:presentation_appearance_schemaexpg9>>; 15
* <<express:presentation_appearance_schemaexpg4>>; 16
* <<express:presentation_appearance_schemaexpg9>>; 17
* <<express:presentation_appearance_schemaexpg5>>; 18
* <<express:presentation_appearance_schemaexpg8>>; 19
* <<express:presentation_appearance_schemaexpg5>>; 20
* <<express:presentation_appearance_schemaexpg6>>; 21
* <<express:presentation_appearance_schemaexpg5>>; 22
* <<express:presentation_appearance_schemaexpg6>>; 23
* <<express:presentation_appearance_schemaexpg5>>; 24
* <<express:presentation_appearance_schemaexpg9>>; 25
* <<express:presentation_appearance_schemaexpg3>>; 26
* <<express:presentation_appearance_schemaexpg3>>; 27
* <<express:presentation_appearance_schemaexpg5>>; 28
* <<express:presentation_appearance_schemaexpg4>>; 29
* <<express:presentation_resource_schema.colour>>; 30
* <<express:geometry_schema.axis2_placement>>; 31
* <<express:measure_schema.descriptive_measure>>; 32
* <<express:support_resource_schema.label>>; 33
* <<express:measure_schema.measure_with_unit>>; 34
* <<express:measure_schema.plane_angle_measure>>; 35
* <<express:representation_schema.founded_item>>; 36
* <<express:support_resource_schema.label>>; 37
* <<express:external_reference_schema.pre_defined_item>>; 38
* <<express:measure_schema.ratio_measure>>; 39
* <<express:measure_schema.positive_ratio_measure>>; 40
* <<express:measure_schema.length_measure>>; 41
* <<express:presentation_appearance_schema.text_style>>; 42
* <<express:presentation_appearance_schema.character_glyph_style_stroke>>; 43
* <<express:presentation_appearance_schema.text_style_with_mirror>>; 44
* <<express:presentation_appearance_schema.character_glyph_style_outline_with_characteristics>>; 45
* <<express:presentation_appearance_schema.text_style_with_spacing>>; 46
* <<express:presentation_appearance_schema.text_style_with_box_characteristics>>; 47
* <<express:presentation_appearance_schema.text_style_with_justification>>; 48
* <<express:presentation_appearance_schema.character_glyph_style_outline>>; 49
* <<express:presentation_appearance_schema.pre_defined_character_spacing>>; 50
* <<express:presentation_appearance_schema.text_style_for_defined_font>>; 51
* <<express:presentation_appearance_schema.text_justification>>; 52
* <<express:presentation_appearance_schema.box_height>>; 53
* <<express:presentation_appearance_schema.box_slant_angle>>; 54
* <<express:presentation_appearance_schema.box_width>>; 55
* <<express:presentation_appearance_schema.box_rotate_angle>>; 56
* <<express:presentation_appearance_schema.founded_item_subtypes>>; 57
====

*)
(*"presentation_appearance_schema.__expressg"
[[presentation_appearance_schemaexpg3]]
[.svgmap]
====
image::presentation_appearance_schemaexpg3.svg[]

* <<express:presentation_appearance_schema.size_select>>; 1
* <<express:presentation_appearance_schema.marker_select>>; 2
* <<express:presentation_appearance_schemaexpg7>>; 3
* <<express:presentation_appearance_schemaexpg10>>; 4
* <<express:presentation_appearance_schemaexpg2>>; 5
* <<express:presentation_appearance_schemaexpg4>>; 6
* <<express:presentation_appearance_schemaexpg2>>; 7
* <<express:measure_schema.positive_length_measure>>; 8
* <<express:support_resource_schema.label>>; 9
* <<express:measure_schema.measure_with_unit>>; 10
* <<express:measure_schema.length_measure>>; 11
* <<express:presentation_resource_schema.colour>>; 12
* <<express:presentation_resource_schema.colour>>; 13
* <<express:external_reference_schema.pre_defined_item>>; 14
* <<express:support_resource_schema.label>>; 15
* <<express:measure_schema.descriptive_measure>>; 16
* <<express:presentation_appearance_schema.marker_type>>; 17
* <<express:presentation_appearance_schema.squared_or_rounded>>; 18
* <<express:presentation_appearance_schema.curve_style_with_extension>>; 19
* <<express:presentation_appearance_schema.pre_defined_size>>; 20
* <<express:presentation_appearance_schema.curve_style>>; 21
* <<express:presentation_appearance_schema.curve_style_with_ends_and_corners>>; 22
* <<express:presentation_appearance_schema.point_style>>; 23
====

*)
(*"presentation_appearance_schema.__expressg"
[[presentation_appearance_schemaexpg4]]
[.svgmap]
====
image::presentation_appearance_schemaexpg4.svg[]

* <<express:presentation_appearance_schema.invisible_item>>; 1
* <<express:presentation_appearance_schema.style_context_select>>; 2
* <<express:presentation_appearance_schema.invisibility_context>>; 3
* <<express:presentation_appearance_schema.tessellated_surface_item>>; 4
* <<express:presentation_appearance_schema.presentation_style_select>>; 5
* <<express:presentation_appearance_schema.styled_item_target>>; 6
* <<express:presentation_appearance_schemaexpg11>>; 7
* <<express:presentation_appearance_schemaexpg8>>; 8
* <<express:presentation_appearance_schemaexpg11>>; 9
* <<express:presentation_appearance_schemaexpg3>>; 10
* <<express:presentation_appearance_schemaexpg9>>; 11
* <<express:presentation_appearance_schemaexpg5>>; 12
* <<express:presentation_appearance_schemaexpg2>>; 13
* <<express:presentation_appearance_schemaexpg9>>; 14
* <<express:presentation_appearance_schemaexpg3>>; 15
* <<express:presentation_appearance_schemaexpg7>>; 16
* <<express:presentation_appearance_schemaexpg7>>; 17
* <<express:presentation_appearance_schemaexpg2>>; 18
* <<express:representation_schema.mapped_item>>; 19
* <<express:geometric_model_schema.tessellated_surface_set>>; 20
* <<express:group_schema.group>>; 21
* <<express:geometric_model_schema.tessellated_face>>; 22
* <<express:geometric_model_schema.coordinates_list>>; 23
* <<express:representation_schema.representation>>; 24
* <<express:geometric_model_schema.tessellated_solid>>; 25
* <<express:representation_schema.representation_relationship>>; 26
* <<express:topology_schema.topological_representation_item>>; 27
* <<express:presentation_organization_schema.presentation_layer_usage>>; 28
* <<express:representation_schema.representation_item>>; 29
* <<express:product_property_representation_schema.context_dependent_shape_representation>>; 30
* <<express:presentation_organization_schema.presentation_layer_assignment>>; 31
* <<express:presentation_organization_schema.presentation_set>>; 32
* <<express:representation_schema.representation_item>>; 33
* <<express:presentation_organization_schema.presentation_set>>; 34
* <<express:presentation_organization_schema.presentation_representation>>; 35
* <<express:geometry_schema.geometric_representation_item>>; 36
* <<express:representation_schema.representation>>; 37
* <<express:representation_schema.representation_or_representation_reference>>; 38
* <<express:geometric_model_schema.tessellated_shell>>; 39
* <<express:presentation_organization_schema.presentation_layer_assignment>>; 40
* <<express:presentation_appearance_schema.colour_type_enum>>; 41
* <<express:presentation_appearance_schema.null_style>>; 42
* <<express:presentation_appearance_schema.presentation_style_assignment>>; 43
* <<express:presentation_appearance_schema.context_dependent_over_riding_styled_item>>; 44
* <<express:presentation_appearance_schema.over_riding_styled_item>>; 45
* <<express:presentation_appearance_schema.styled_tessellated_item_with_colours>>; 46
* <<express:presentation_appearance_schema.styled_item>>; 47
* <<express:presentation_appearance_schema.presentation_style_by_context>>; 48
* <<express:presentation_appearance_schema.context_dependent_invisibility>>; 49
* <<express:presentation_appearance_schema.invisibility>>; 50
* <<express:presentation_appearance_schema.unsigned_8_bit_integer>>; 51
====

*)
(*"presentation_appearance_schema.__expressg"
[[presentation_appearance_schemaexpg5]]
[.svgmap]
====
image::presentation_appearance_schemaexpg5.svg[]

* <<express:presentation_appearance_schema.curve_or_render>>; 1
* <<express:presentation_appearance_schema.surface_style_element_select>>; 2
* <<express:presentation_appearance_schema.rendering_properties_select>>; 3
* <<express:presentation_appearance_schema.surface_side_style_select>>; 4
* <<express:presentation_appearance_schema.direction_count_select>>; 5
* <<express:presentation_appearance_schemaexpg8>>; 6
* <<express:presentation_appearance_schemaexpg3>>; 7
* <<express:presentation_appearance_schemaexpg4>>; 8
* <<express:presentation_appearance_schemaexpg2>>; 9
* <<express:presentation_appearance_schemaexpg2>>; 10
* <<express:presentation_appearance_schemaexpg2>>; 11
* <<express:presentation_appearance_schemaexpg2>>; 12
* <<express:presentation_appearance_schemaexpg2>>; 13
* <<express:presentation_appearance_schemaexpg2>>; 14
* <<express:presentation_appearance_schemaexpg2>>; 15
* <<express:presentation_appearance_schemaexpg2>>; 16
* <<express:support_resource_schema.label>>; 17
* <<express:presentation_resource_schema.colour>>; 18
* <<express:presentation_resource_schema.colour>>; 19
* <<express:presentation_resource_schema.colour>>; 20
* <<express:external_reference_schema.pre_defined_item>>; 21
* <<express:presentation_appearance_schema.surface_side>>; 22
* <<express:presentation_appearance_schema.shading_curve_method>>; 23
* <<express:presentation_appearance_schema.shading_surface_method>>; 24
* <<express:presentation_appearance_schema.surface_side_style>>; 25
* <<express:presentation_appearance_schema.curve_style_rendering>>; 26
* <<express:presentation_appearance_schema.surface_style_usage>>; 27
* <<express:presentation_appearance_schema.surface_style_segmentation_curve>>; 28
* <<express:presentation_appearance_schema.surface_style_reflectance_ambient>>; 29
* <<express:presentation_appearance_schema.surface_style_reflectance_ambient_diffuse_specular>>; 30
* <<express:presentation_appearance_schema.surface_style_control_grid>>; 31
* <<express:presentation_appearance_schema.surface_style_reflectance_ambient_diffuse>>; 32
* <<express:presentation_appearance_schema.surface_style_transparent>>; 33
* <<express:presentation_appearance_schema.surface_style_boundary>>; 34
* <<express:presentation_appearance_schema.surface_rendering_properties>>; 35
* <<express:presentation_appearance_schema.surface_style_parameter_line>>; 36
* <<express:presentation_appearance_schema.surface_style_rendering>>; 37
* <<express:presentation_appearance_schema.pre_defined_surface_side_style>>; 38
* <<express:presentation_appearance_schema.surface_style_fill_area>>; 39
* <<express:presentation_appearance_schema.surface_style_rendering_with_properties>>; 40
* <<express:presentation_appearance_schema.surface_style_silhouette>>; 41
* <<express:presentation_appearance_schema.u_direction_count>>; 42
* <<express:presentation_appearance_schema.v_direction_count>>; 43
====

*)
(*"presentation_appearance_schema.__expressg"
[[presentation_appearance_schemaexpg6]]
[.svgmap]
====
image::presentation_appearance_schemaexpg6.svg[]

* <<express:presentation_appearance_schemaexpg8>>; 1
* <<express:presentation_appearance_schemaexpg8>>; 2
* <<express:presentation_appearance_schemaexpg8>>; 3
* <<express:presentation_appearance_schemaexpg8>>; 4
* <<express:presentation_appearance_schemaexpg7>>; 5
* <<express:presentation_appearance_schemaexpg7>>; 6
* <<express:presentation_appearance_schemaexpg7>>; 7
* <<express:presentation_appearance_schemaexpg8>>; 8
* <<express:presentation_appearance_schemaexpg8>>; 9
* <<express:presentation_appearance_schemaexpg7>>; 10
* <<express:presentation_appearance_schemaexpg7>>; 11
* <<express:presentation_appearance_schemaexpg10>>; 12
* <<express:presentation_appearance_schemaexpg2>>; 13
* <<express:presentation_appearance_schemaexpg2>>; 14
* <<express:measure_schema.positive_length_measure>>; 15
* <<express:geometry_schema.geometric_representation_item>>; 16
* <<express:presentation_definition_schema.annotation_curve_occurrence>>; 17
* <<express:support_resource_schema.label>>; 18
* <<express:measure_schema.positive_length_measure>>; 19
* <<express:presentation_appearance_schema.curve_style_wide>>; 20
* <<express:presentation_appearance_schema.curve_style_font_pattern>>; 21
* <<express:presentation_appearance_schema.curve_style_font>>; 22
* <<express:presentation_appearance_schema.curve_style_curve_pattern_set>>; 23
* <<express:presentation_appearance_schema.curve_style_curve_pattern>>; 24
* <<express:presentation_appearance_schema.pas_geometric_representation_item_subtypes>>; 25
====

*)
(*"presentation_appearance_schema.__expressg"
[[presentation_appearance_schemaexpg7]]
[.svgmap]
====
image::presentation_appearance_schemaexpg7.svg[]

* <<express:presentation_appearance_schema.curve_or_annotation_curve_occurrence>>; 1
* <<express:presentation_appearance_schemaexpg6>>; 2
* <<express:presentation_appearance_schemaexpg6>>; 3
* <<express:presentation_appearance_schemaexpg8>>; 4
* <<express:presentation_appearance_schemaexpg4>>; 5
* <<express:presentation_appearance_schemaexpg8>>; 6
* <<express:presentation_appearance_schemaexpg6>>; 7
* <<express:presentation_appearance_schemaexpg8>>; 8
* <<express:presentation_appearance_schemaexpg2>>; 9
* <<express:presentation_appearance_schemaexpg6>>; 10
* <<express:presentation_appearance_schemaexpg2>>; 11
* <<express:presentation_appearance_schemaexpg6>>; 12
* <<express:presentation_appearance_schemaexpg8>>; 13
* <<express:presentation_appearance_schemaexpg8>>; 14
* <<express:presentation_appearance_schemaexpg8>>; 15
* <<express:presentation_appearance_schemaexpg8>>; 16
* <<express:presentation_appearance_schemaexpg3>>; 17
* <<express:presentation_appearance_schemaexpg4>>; 18
* <<express:presentation_definition_schema.annotation_curve_occurrence>>; 19
* <<express:external_reference_schema.pre_defined_item>>; 20
* <<express:presentation_resource_schema.colour>>; 21
* <<express:geometry_schema.curve>>; 22
* <<express:external_reference_schema.externally_defined_item>>; 23
* <<express:presentation_appearance_schema.pre_defined_hatch_style>>; 24
* <<express:presentation_appearance_schema.externally_defined_hatch_style>>; 25
* <<express:presentation_appearance_schema.pre_defined_tile>>; 26
* <<express:presentation_appearance_schema.externally_defined_tile_style>>; 27
* <<express:presentation_appearance_schema.externally_defined_tile>>; 28
* <<express:presentation_appearance_schema.pre_defined_tile_style>>; 29
* <<express:presentation_appearance_schema.pre_defined_marker>>; 30
* <<express:presentation_appearance_schema.fill_area_style_tile_coloured_region>>; 31
* <<express:presentation_appearance_schema.externally_defined_style>>; 32
* <<express:presentation_appearance_schema.pre_defined_presentation_style>>; 33
====

*)
(*"presentation_appearance_schema.__expressg"
[[presentation_appearance_schemaexpg8]]
[.svgmap]
====
image::presentation_appearance_schemaexpg8.svg[]

* <<express:presentation_appearance_schema.fill_area_style_tile_shape_select>>; 1
* <<express:presentation_appearance_schema.fill_style_select>>; 2
* <<express:presentation_appearance_schemaexpg7>>; 3
* <<express:presentation_appearance_schemaexpg3>>; 4
* <<express:presentation_appearance_schemaexpg7>>; 5
* <<express:presentation_appearance_schemaexpg11>>; 6
* <<express:presentation_appearance_schemaexpg7>>; 7
* <<express:presentation_appearance_schemaexpg7>>; 8
* <<express:presentation_appearance_schemaexpg7>>; 9
* <<express:presentation_appearance_schemaexpg7>>; 10
* <<express:presentation_appearance_schemaexpg7>>; 11
* <<express:presentation_appearance_schemaexpg2>>; 12
* <<express:presentation_appearance_schemaexpg6>>; 13
* <<express:presentation_appearance_schemaexpg6>>; 14
* <<express:presentation_appearance_schemaexpg6>>; 15
* <<express:presentation_appearance_schemaexpg6>>; 16
* <<express:presentation_appearance_schemaexpg6>>; 17
* <<express:geometry_schema.cartesian_point>>; 18
* <<express:presentation_resource_schema.colour>>; 19
* <<express:support_resource_schema.label>>; 20
* <<express:measure_schema.positive_ratio_measure>>; 21
* <<express:presentation_definition_schema.annotation_curve_occurrence>>; 22
* <<express:support_resource_schema.label>>; 23
* <<express:measure_schema.plane_angle_measure>>; 24
* <<express:presentation_definition_schema.annotation_symbol_occurrence>>; 25
* <<express:geometry_schema.vector>>; 26
* <<express:presentation_appearance_schema.fill_area_style>>; 27
* <<express:presentation_appearance_schema.fill_area_style_tiles>>; 28
* <<express:presentation_appearance_schema.fill_area_style_tile_curve_with_style>>; 29
* <<express:presentation_appearance_schema.two_direction_repeat_factor>>; 30
* <<express:presentation_appearance_schema.fill_area_style_colour>>; 31
* <<express:presentation_appearance_schema.fill_area_style_hatching>>; 32
* <<express:presentation_appearance_schema.fill_area_style_tile_symbol_with_style>>; 33
* <<express:presentation_appearance_schema.one_direction_repeat_factor>>; 34
====

*)
(*"presentation_appearance_schema.__expressg"
[[presentation_appearance_schemaexpg9]]
[.svgmap]
====
image::presentation_appearance_schemaexpg9.svg[]

* <<express:presentation_appearance_schema.symbol_style_select>>; 1
* <<express:presentation_appearance_schema.tolerance_deviation_select>>; 2
* <<express:presentation_appearance_schema.tolerance_select>>; 3
* <<express:presentation_appearance_schema.tolerance_parameter_select>>; 4
* <<express:presentation_appearance_schemaexpg4>>; 5
* <<express:presentation_appearance_schemaexpg2>>; 6
* <<express:presentation_appearance_schemaexpg2>>; 7
* <<express:presentation_appearance_schemaexpg2>>; 8
* <<express:presentation_appearance_schemaexpg2>>; 9
* <<express:presentation_appearance_schemaexpg2>>; 10
* <<express:presentation_appearance_schemaexpg4>>; 11
* <<express:presentation_appearance_schemaexpg4>>; 12
* <<express:support_resource_schema.label>>; 13
* <<express:measure_schema.positive_length_measure>>; 14
* <<express:presentation_resource_schema.colour>>; 15
* <<express:measure_schema.positive_length_measure>>; 16
* <<express:presentation_appearance_schema.approximation_method>>; 17
* <<express:presentation_appearance_schema.product_or_presentation_space>>; 18
* <<express:presentation_appearance_schema.symbol_colour>>; 19
* <<express:presentation_appearance_schema.symbol_style>>; 20
* <<express:presentation_appearance_schema.approximation_tolerance_parameter>>; 21
* <<express:presentation_appearance_schema.approximation_tolerance>>; 22
* <<express:presentation_appearance_schema.approximation_tolerance_deviation>>; 23
* <<express:presentation_appearance_schema.symbol_element_style>>; 24
* <<express:presentation_appearance_schema.surface_tolerance_parameter>>; 25
* <<express:presentation_appearance_schema.surface_tolerance_deviation>>; 26
* <<express:presentation_appearance_schema.curve_tolerance_deviation>>; 27
* <<express:presentation_appearance_schema.curve_tolerance_parameter>>; 28
====

*)
(*"presentation_appearance_schema.__expressg"
[[presentation_appearance_schemaexpg10]]
[.svgmap]
====
image::presentation_appearance_schemaexpg10.svg[]

* <<express:presentation_appearance_schema.curve_font_or_scaled_curve_font_select>>; 1
* <<express:presentation_appearance_schema.curve_style_font_select>>; 2
* <<express:presentation_appearance_schema.hiding_or_blanking_select>>; 3
* <<express:presentation_appearance_schemaexpg6>>; 4
* <<express:presentation_appearance_schemaexpg3>>; 5
* <<express:presentation_appearance_schemaexpg2>>; 6
* <<express:presentation_definition_schema.annotation_fill_area>>; 7
* <<express:representation_schema.representation>>; 8
* <<express:presentation_organization_schema.presentation_view>>; 9
* <<express:presentation_organization_schema.area_dependent_annotation_representation>>; 10
* <<express:presentation_definition_schema.symbol_representation_with_blanking_box>>; 11
* <<express:presentation_organization_schema.product_data_representation_view>>; 12
* <<express:external_reference_schema.externally_defined_item>>; 13
* <<express:presentation_organization_schema.presentation_area>>; 14
* <<express:presentation_organization_schema.view_dependent_annotation_representation>>; 15
* <<express:presentation_resource_schema.character_glyph_symbol_outline>>; 16
* <<express:presentation_resource_schema.character_glyph_symbol_stroke>>; 17
* <<express:presentation_definition_schema.annotation_text_with_delineation>>; 18
* <<express:support_resource_schema.label>>; 19
* <<express:external_reference_schema.pre_defined_item>>; 20
* <<express:presentation_appearance_schema.pre_defined_curve_font>>; 21
* <<express:presentation_appearance_schema.occlusion_precedence>>; 22
* <<express:presentation_appearance_schema.curve_style_font_and_scaling>>; 23
* <<express:presentation_appearance_schema.externally_defined_curve_font>>; 24
* <<express:presentation_appearance_schema.draughting_pre_defined_curve_font>>; 25
====

*)
(*"presentation_appearance_schema.__expressg"
[[presentation_appearance_schemaexpg11]]
[.svgmap]
====
image::presentation_appearance_schemaexpg11.svg[]

* <<express:presentation_appearance_schema.tessellated_face_or_tessellated_surface_set>>; 1
* <<express:presentation_appearance_schemaexpg4>>; 2
* <<express:presentation_appearance_schemaexpg8>>; 3
* <<express:presentation_appearance_schemaexpg4>>; 4
* <<express:presentation_appearance_schemaexpg4>>; 5
* <<express:support_resource_schema.label>>; 6
* <<express:geometric_model_schema.tessellated_surface_set>>; 7
* <<express:geometric_model_schema.tessellated_face>>; 8
* <<express:representation_schema.founded_item>>; 9
* <<express:presentation_appearance_schema.texture_file_type>>; 10
* <<express:presentation_appearance_schema.styled_tessellated_face_or_surface_with_single_texture>>; 11
* <<express:presentation_appearance_schema.single_texture_style_tessellation_specification>>; 12
* <<express:presentation_appearance_schema.texture_style_tessellation_specification>>; 13
* <<express:presentation_appearance_schema.texture_style_specification>>; 14
* <<express:presentation_appearance_schema.non_negative_real>>; 15
====
*)

(*"presentation_appearance_schema.style_context_select"
The **style_context_select** selects between the entities which can be a context for the assignment or over-riding of presentation style.
*)


(*"presentation_appearance_schema.presentation_style_select"
The **presentation_style_select** is used by a <<express:presentation_appearance_schema.presentation_style_assignment,presentation_style_assignment>> to associate style with a <<express:representation_schema.representation_item,representation_item>>. A different style is provided for each kind of <<express:representation_schema.representation_item,representation_item>> to be styled.
*)


(*"presentation_appearance_schema.null_style"
The **null_style** specifies that no specific style is assigned directly to an item that is to be presented. The style or styles to be used in presenting the item are specified within the definition of the item. If no styles are specified within the definition, then it is up to the receiving system on how to present the item.
*)

(*"presentation_appearance_schema.null_style.__example"
A symbol is defined using two <<express:presentation_definition_schema.annotation_curve_occurrence,annotation_curve_occurrence>>s, which are styled such that one is red and the other is blue. If an instance of the symbol is assigned *null_style*, it will be presented using the colours specified in the definition.
*)

(*"presentation_appearance_schema.null_style.null"
the <<express:representation_schema.representation_item,representation_item>> to which the style is applied shall be presented using the style or styles contained in its definition, if any.
*)


(*"presentation_appearance_schema.marker_select"
The **marker_select** is a selection of a specific marker or a pre-defined marker used for the presentation of points.
*)


(*"presentation_appearance_schema.marker_type"
The **marker_type** specifies the form for the presentation of points.
*)


(*"presentation_appearance_schema.non_negative_real"
The **non_negative_real** type is a real and its value is restricted to be zero or positive.
*)


(*"presentation_appearance_schema.non_negative_real.wr:WR1"
The value of the real shall be greater than or equal to zero.
*)


(*"presentation_appearance_schema.marker_type.square"
points are presented as squares (□).
*)


(*"presentation_appearance_schema.marker_type.triangle"
points are presented as triangles (△).
*)


(*"presentation_appearance_schema.marker_type.ring"
points are presented as circles (◦).
*)


(*"presentation_appearance_schema.marker_type.plus"
points are presented as plus signs (+).
*)


(*"presentation_appearance_schema.marker_type.dot"
points are presented as dots (.).
*)


(*"presentation_appearance_schema.marker_type.x"
points are presented as diagonal crosses (x).
*)


(*"presentation_appearance_schema.marker_type.asterisk"
points are presented as asterisks (`*`).
*)


(*"presentation_appearance_schema.size_select"
The **size_select** is used to specify the size of marker symbols or the width of curves.
*)


(*"presentation_appearance_schema.curve_font_or_scaled_curve_font_select"
The **curve_font_or_scaled_curve_font_select** is used to specify the font for presenting a curve.
*)


(*"presentation_appearance_schema.curve_style_font_select"
The **curve_style_font_select** is used to specify an unscaled font for presenting a curve.
*)


(*"presentation_appearance_schema.squared_or_rounded"
The **squared_or_rounded** type specifies the appearance of curves at their corners or ends.
*)

(*"presentation_appearance_schema.squared_or_rounded.__figure"
[[figure-presentation_appearance_schema-fig_squared_or_rounded]]
====
image::squared_or_rounded.gif[]
====
*)

(*"presentation_appearance_schema.squared_or_rounded.__note"
See figure 20.
*)

(*"presentation_appearance_schema.squared_or_rounded.squared"
the curve is squared off at its end points and corners.
*)


(*"presentation_appearance_schema.squared_or_rounded.rounded"
a filled semi-circular arc with diameter equal to the curve width is drawn around the curve's end points and corners.
*)


(*"presentation_appearance_schema.fill_style_select"
The **fill_style_select** is a selection between different fill styles.
*)


(*"presentation_appearance_schema.fill_area_style_tile_shape_select"
The **fill_area_style_tile_shape_select** is used for the definition of <<express:presentation_appearance_schema.fill_area_style_tiles,fill_area_style_tiles>>. It selects between different shapes and sources of tiles.
*)


(*"presentation_appearance_schema.curve_or_annotation_curve_occurrence"
The **curve_or_annotation_curve_occurrence** provides a <<express:geometry_schema.curve,curve>> or an <<express:presentation_definition_schema.annotation_curve_occurrence,annotation_curve_occurrence>> for defining the boundary of a <<express:presentation_appearance_schema.fill_area_style_tile_coloured_region,fill_area_style_tile_coloured_region>>.
*)


(*"presentation_appearance_schema.surface_side"
The **surface_side** is used by <<express:presentation_appearance_schema.surface_style_usage,surface_style_usage>> to specify the sides of a surface to which a surface style is applied.
*)


(*"presentation_appearance_schema.surface_side.positive"
the side of a surface which is in the same direction as the surface normal.
*)


(*"presentation_appearance_schema.surface_side.negative"
the side of a surface which is in the opposite direction than the surface normal.
*)


(*"presentation_appearance_schema.surface_side.both"
both sides.
*)


(*"presentation_appearance_schema.surface_style_element_select"
The **surface_style_element_select** is a selection of the different surface styles to use in the presentation of the side of a surface.
*)


(*"presentation_appearance_schema.curve_or_render"
The **curve_or_render** select type is used in the definition of several surface styles to control the appearance of curves on a surface.
*)


(*"presentation_appearance_schema.shading_curve_method"
The **shading_curve_method** specifies the method which shall be used for the shading of curves. Shading of curves (approximated by polylines) is the colouring of the line segments according to colour values at certain points of the curve.
*)


(*"presentation_appearance_schema.shading_curve_method.constant_colour"
if the curve has a colour association table and is approximated by i polyline segments, the colour state at the segment boundaries shall be interpolated in this table according to the state variable value at each boundary. The i-th polyline segment shall then be shaded in constant colour according to the colour state at the i-th segment start.
*)


(*"presentation_appearance_schema.shading_curve_method.linear_colour"
if the curve has a colour association table and is approximated by i polyline segments, the colour state at the segment boundaries shall be interpolated in this table according to the state variable value at each boundary. The i-th polyline segment shall then be shaded in linearly interpolated colour according to the colour states at both segment boundaries.
*)


(*"presentation_appearance_schema.direction_count_select"
The **direction_count_select** is a selection between a <<express:presentation_appearance_schema.u_direction_count,u_direction_count>> and a <<express:presentation_appearance_schema.v_direction_count,v_direction_count>> for use in presenting parameter lines of a surface.
*)


(*"presentation_appearance_schema.u_direction_count"
The **u_direction_count** is a positive integer indicating the number of parameter curves in the u direction of a parametric surface.
*)


(*"presentation_appearance_schema.u_direction_count.wr:WR1"
The u direction count shall be greater than 1.
*)


(*"presentation_appearance_schema.unsigned_8_bit_integer"
The **unsigned_8_bit_integer** type is an unsigned integer with binary representation of eight bits.
*)


(*"presentation_appearance_schema.unsigned_8_bit_integer.wr:WR1"
The value of the integer shall be in the range 0 to 255 inclusive.
*)


(*"presentation_appearance_schema.v_direction_count"
The **v_direction_count** is a positive integer indicating the number of parameter curves in the v direction of a parametric surface.
*)


(*"presentation_appearance_schema.v_direction_count.wr:WR1"
The v direction count shall be greater than 1.
*)


(*"presentation_appearance_schema.shading_surface_method"
The **shading_surface_method** specifies the method which shall be used for the shading of surfaces.
*)


(*"presentation_appearance_schema.shading_surface_method.__note"
The descriptions of the different types of surface shading show that in some cases the method involves interpolating results from the lighting, and in other case it involves performing the reflectance calculation after interpolation. For this reason, the shading method may be thought of as selecting a location in a display system's graphics pipeline where interpolation takes place.
*)

(*"presentation_appearance_schema.shading_surface_method.__note"
The results of the shading methods should produce the effects according to the enumerated item definitions. One particular case where the effects are difficult to define is when the silhouette of a surface intersects itself or another silhouette of the same surface. In this case, the effect is implementation-dependent.
*)

(*"presentation_appearance_schema.shading_surface_method.__note"
The shading methods correspond to those provided by PHIGS PLUS [10].
*)

(*"presentation_appearance_schema.shading_surface_method.normal_shading"
the surface normals are interpolated linearly across the surface. The reflectance calculation is performed at each interpolated position of the surface to produce a reflected colour based on the interpolated surface normal and the <<express:presentation_appearance_schema.surface_style_rendering.surface_colour,surface_colour>> of the relevant <<express:presentation_appearance_schema.surface_style_rendering,surface_style_rendering>> entity.

If the <<express:presentation_appearance_schema.surface_style_rendering.surface_colour,surface_colour>> is specified through a <<express:presentation_resource_schema.colour_specification,colour_specification>>, the interpolation of colours shall be performed in the colour model of that specification. Otherwise the interpolation may be performed in an arbitrary model.
*)


(*"presentation_appearance_schema.shading_surface_method.normal_shading.__note"
The result of colour interpolation depends on the colour model in which interpolation is performed.
*)

(*"presentation_appearance_schema.shading_surface_method.normal_shading.__note"
Examples of colour models are RGB, HSV, HLS.
*)

(*"presentation_appearance_schema.shading_surface_method.normal_shading.__note"
More information about colour models and colour interpolation can be found in [13], pp. 611-620.
*)

(*"presentation_appearance_schema.shading_surface_method.constant_shading"
a reflectance calculation is performed for each facet of the approximated surface to produce one reflected colour per facet. The point on the facet used in the calculation is implementation-dependent. The colour used in the reflectance calculation is the <<express:presentation_appearance_schema.surface_style_rendering.surface_colour,surface_colour>> specified in the relevant <<express:presentation_appearance_schema.surface_style_rendering,surface_style_rendering>> entity.
*)


(*"presentation_appearance_schema.shading_surface_method.dot_shading"
any dot products needed by the reflectance equation are calculated from surface normals at a set of positions on the surface. These dot products are interpolated linearly across the surface. The reflectance calculation is performed at each interpolated position of the surface to produce a reflected colour based on the interpolated dot products and the <<express:presentation_appearance_schema.surface_style_rendering.surface_colour,surface_colour>> of the relevant <<express:presentation_appearance_schema.surface_style_rendering,surface_style_rendering>> entity.
*)


(*"presentation_appearance_schema.shading_surface_method.colour_shading"
a reflectance calculation is performed at each vertex of each facet of the approximated product shape, using the <<express:presentation_appearance_schema.surface_style_rendering.surface_colour,surface_colour>> and the surface normals in the vertices. The resulting reflected colours are interpolated linearly across each facet.
*)


(*"presentation_appearance_schema.rendering_properties_select"
The **rendering_properties_select** is a selection between two kinds of properties for a surface: reflectance and transparency.
*)


(*"presentation_appearance_schema.colour_type_enum"
The **colour_type_enum** is an enumeration of colour formats to be associated with vertices of tessellated geometry.
*)


(*"presentation_appearance_schema.colour_type_enum.RGB8"
Red Green Blue eight-bit-integer storage colour-model format.
*)


(*"presentation_appearance_schema.colour_type_enum.RGBT8"
Red Green Blue Transparency 8-bit integer storage colour model format.
*)


(*"presentation_appearance_schema.text_justification"
The **text_justification** type is provided to control the justification of text.
*)


(*"presentation_appearance_schema.text_justification.__note"
Application Protocols shall specify legal values of the *text_justification* and shall associate precise meaning to these values.
*)

(*"presentation_appearance_schema.texture_file_type"
The **texture_file_type** type is an enumeration list of file formats that specifies the image format of a texture mapped to a <<express:presentation_appearance_schema.single_texture_style_tessellation_specification,single_texture_style_tessellation_specification>>.
*)


(*"presentation_appearance_schema.texture_file_type.JPEG"
Joint Photographic Experts Group image file format.
*)


(*"presentation_appearance_schema.texture_file_type.PNG"
Portable Network Graphics image file format.
*)


(*"presentation_appearance_schema.texture_file_type.GIF"
Graphics Interchange Format image file format.
*)


(*"presentation_appearance_schema.texture_file_type.TIFF"
Tagged Image File Format image file format.
*)


(*"presentation_appearance_schema.texture_file_type.BMP"
Bitmap image file format.
*)


(*"presentation_appearance_schema.texture_file_type.BMP.__note"
This format is defined by Microsoft Windows Bitmap Format [16]
*)

(*"presentation_appearance_schema.texture_file_type.DDS"
DirectDraw Surface image file format.
*)


(*"presentation_appearance_schema.texture_file_type.DDS.__note"
This file format is defined by Microsoft DirectX 7 [17].
*)

(*"presentation_appearance_schema.texture_file_type.TGA"
Truevision Graphics Adapter image file format.
*)


(*"presentation_appearance_schema.texture_file_type.TGA.__note"
This file format is defined by Truevision Inc. [18].
*)

(*"presentation_appearance_schema.texture_file_type.other"
other image file format.
*)


(*"presentation_appearance_schema.box_height"
The **box_height** is a height scaling factor used in the definition of a character glyph.
*)


(*"presentation_appearance_schema.box_width"
The **box_width** is a width scaling factor used in the definition of a character glyph.
*)


(*"presentation_appearance_schema.box_slant_angle"
A **box_slant_angle** is an angle which indicates that the box for a character glyph shall be presented as a parallelogram, with the angle being between the character up line and an axis perpendicular to the character base line.
*)


(*"presentation_appearance_schema.box_slant_angle.__note"
Figure 19 shows the definition of *box_slant_angle*.
*)

(*"presentation_appearance_schema.box_slant_angle.wr:IP1"
The **box_slant_angle** shall be between 0 and 90 degree.
*)


(*"presentation_appearance_schema.box_rotate_angle"
The **box_rotate_angle** is an angle which indicates that the box for a character glyph shall be presented at an angle to the baseline of the text string within which the glyph occurs, the angle being that between the baseline of the glyph and an axis perpendicular to the baseline of the text string.
*)

(*"presentation_appearance_schema.box_rotate_angle.__figure"
[[figure-presentation_appearance_schema-fig_slant_angle]]
====
image::box_slant_and_rotate_angle.gif[]
====
*)

(*"presentation_appearance_schema.box_rotate_angle.__note"
Figure 19 shows the definition of *box_rotate_angle*.
*)

(*"presentation_appearance_schema.character_spacing_select"
The **character_spacing_select** is used to specify the method of spacing between adjacent characters in a text string.
*)


(*"presentation_appearance_schema.symbol_style_select"
The **symbol_style_select** is used to specify the style to be applied to elements of a symbol, or the colour to be applied to an entire symbol.
*)


(*"presentation_appearance_schema.tolerance_select"
The **tolerance_select** is used by the <<express:presentation_appearance_schema.approximation_tolerance,approximation_tolerance>> to select either an <<express:presentation_appearance_schema.approximation_tolerance_deviation,approximation_tolerance_deviation>> or an <<express:presentation_appearance_schema.approximation_tolerance_parameter,approximation_tolerance_parameter>>.
*)


(*"presentation_appearance_schema.approximation_method"
The **approximation_method** is used to enumerate two possible methods for the tessellation of curves and surfaces with line segments or meshes of planar polygons.
*)

(*"presentation_appearance_schema.approximation_method.__figure"
[[figure-presentation_appearance_schema-fig_chordal_deviation_and_length]]
====
image::chordal_deviation_and_length.gif[]
====
*)

(*"presentation_appearance_schema.approximation_method.__note"
Figure 18 shows the definition of *chordal_deviation* and *chordal_length*.
*)

(*"presentation_appearance_schema.approximation_method.chordal_deviation"
curves are approximated in a way that the distance between the curve and the line segment does not exceed a given deviation value. Surfaces are approximated in a way that the distance between the surface and the polygon does not exceed a given deviation value. The distance is measured in the normal direction to the line segment or the planar polygon. The **chordal_deviation** is measured either in product shape space units or <<express:presentation_organization_schema.presentation_area,presentation_area>> units as specified by an <<express:presentation_appearance_schema.approximation_tolerance_deviation,approximation_tolerance_deviation>>.
*)


(*"presentation_appearance_schema.approximation_method.chordal_length"
curves are approximated in a way that the resulting line segments have uniform length. Surfaces are approximated in a way that the edges of the resulting planar polygons have uniform length. The **chordal_length** is measured either in product shape space units or <<express:presentation_organization_schema.presentation_area,presentation_area>> units as specified by an <<express:presentation_appearance_schema.approximation_tolerance_deviation,approximation_tolerance_deviation>>.
*)


(*"presentation_appearance_schema.tolerance_deviation_select"
The **tolerance_deviation_select** is used by an <<express:presentation_appearance_schema.approximation_tolerance_deviation,approximation_tolerance_deviation>> to select either a <<express:presentation_appearance_schema.curve_tolerance_deviation,curve_tolerance_deviation>> or a <<express:presentation_appearance_schema.surface_tolerance_deviation,surface_tolerance_deviation>>.
*)


(*"presentation_appearance_schema.curve_tolerance_deviation"
The **curve_tolerance_deviation** specifies an approximation tolerance for a curve by providing a deviation value.
*)


(*"presentation_appearance_schema.surface_tolerance_deviation"
The **surface_tolerance_deviation** specifies an approximation tolerance for a surface by providing a deviation value.
*)


(*"presentation_appearance_schema.product_or_presentation_space"
The **product_or_presentation_space** is used by an <<express:presentation_appearance_schema.approximation_tolerance_deviation,approximation_tolerance_deviation>> to specify the space in which the tolerance values are defined.
*)


(*"presentation_appearance_schema.product_or_presentation_space.presentation_area_space"
the coordinate space in which the <<express:presentation_organization_schema.presentation_area,presentation_area>> is founded.
*)


(*"presentation_appearance_schema.product_or_presentation_space.product_shape_space"
the definition space of the product shape item to be presented.
*)


(*"presentation_appearance_schema.tolerance_parameter_select"
The **tolerance_parameter_select** is used by an <<express:presentation_appearance_schema.approximation_tolerance_parameter,approximation_tolerance_parameter>> to select either a <<express:presentation_appearance_schema.curve_tolerance_parameter,curve_tolerance_parameter>> or a <<express:presentation_appearance_schema.surface_tolerance_parameter,surface_tolerance_parameter>>.
*)


(*"presentation_appearance_schema.curve_tolerance_parameter"
The **curve_tolerance_parameter** specifies an approximation tolerance for curves in parameter space units.
*)


(*"presentation_appearance_schema.surface_tolerance_parameter"
The **surface_tolerance_parameter** specifies an approximation tolerance for surfaces in parameter space units.
*)


(*"presentation_appearance_schema.hiding_or_blanking_select"
The **hiding_or_blanking_select** selects the entities which can hide or blank other entities in a presentation.
*)


(*"presentation_appearance_schema.invisibility_context"
The **invisibility_context** type selects the context in which elements of a picture may be denoted as invisible.
*)


(*"presentation_appearance_schema.invisible_item"
The **invisible_item** type selects elements of a picture that may be denoted as invisible.
*)


(*"presentation_appearance_schema.styled_item"
A **styled_item** is a type of <<express:representation_schema.representation_item,representation_item>> with associated presentation style.
*)


(*"presentation_appearance_schema.styled_item.styles"
the styles assigned to the item.
*)


(*"presentation_appearance_schema.styled_item.item"
the item to which styles are assigned.
*)


(*"presentation_appearance_schema.styled_item.wr:WR1"
The set **styles** shall contain only one style or all members of the set shall be <<express:presentation_appearance_schema.presentation_style_by_context,presentation_style_by_context>> entities.
*)


(*"presentation_appearance_schema.styled_item.wr:WR1.__note"
This is to ensure that there are no style conflicts; more than one style may be specified only when the context in which each style applies is given.
*)

(*"presentation_appearance_schema.styled_item.wr:WR2"
The **item** to be styled shall not be a <<express:presentation_appearance_schema.styled_item,styled_item>>.
*)


(*"presentation_appearance_schema.styled_item.wr:WR3"
Unless the **styled_item** is a <<express:presentation_appearance_schema.context_dependent_over_riding_styled_item,context_dependent_over_riding_styled_item>>, the styled **item** shall either be a <<express:representation_schema.mapped_item,mapped_item>> or a <<express:geometry_schema.geometric_representation_item,geometric_representation_item>>.
*)


(*"presentation_appearance_schema.styled_tessellated_item_with_colours"
A **styled_tessellated_item_with_colours** is a type of <<express:presentation_appearance_schema.styled_item,styled_item>> that assigns colour values to the vertices of tessellated surfaces.
*)


(*"presentation_appearance_schema.styled_tessellated_item_with_colours.item"
the tessellated geometry to which the colours are assigned, this may be a <<express:geometric_model_schema.tessellated_face,tessellated_face>>, a <<express:geometric_model_schema.tessellated_shell,tessellated_shell>>, a <<express:geometric_model_schema.tessellated_solid,tessellated_solid>>, or a <<express:geometric_model_schema.tessellated_surface_set,tessellated_surface_set>>.
*)


(*"presentation_appearance_schema.styled_tessellated_item_with_colours.colour_type"
the colour formats used by the **colour_values** attribute.
*)


(*"presentation_appearance_schema.styled_tessellated_item_with_colours.colour_values"
an unlimited list of three or four integers representing a vertex colour.
*)


(*"presentation_appearance_schema.styled_tessellated_item_with_colours.coloured_coordinate_values"
the **coordinates_list** of the <<express:presentation_appearance_schema.tessellated_surface_item,tessellated_surface_item>> specified by the **item** attribute; this **coordinates_list** is populated by the <<express:presentation_appearance_schema.get_coordinate_values,get_coordinate_values>> function.
*)


(*"presentation_appearance_schema.styled_tessellated_item_with_colours.wr:WR1"
The inherited **styles** attribute be an empty SET.
*)


(*"presentation_appearance_schema.styled_tessellated_item_with_colours.wr:WR2"
If the **colour_type** is RGB8 then **colour_values** shall be a list of three unsigned eight-bit integers, or, if the **colour_type** is RGBT8 then **colour_values** shall be a list of four unsigned eight-bit integers.
*)


(*"presentation_appearance_schema.styled_tessellated_item_with_colours.wr:WR3"
The number of **colour_values** shall be equal to the number of points in the associated **coordinates_list**.
*)


(*"presentation_appearance_schema.over_riding_styled_item"
An **over_riding_styled_item** is a type of <<express:presentation_appearance_schema.styled_item,styled_item>> where the style assignment takes precedence over another assigned style. The precedence happens when the **over_ridden_style** <<express:presentation_appearance_schema.styled_item,styled_item>> and the **over_riding_styled_item** are both included, directly or indirectly, in the same presentation.
*)

(*"presentation_appearance_schema.over_riding_styled_item.__example"
A circle instance is used by a <<express:geometric_model_schema.geometric_curve_set,geometric_curve_set>> which is an item in a <<express:representation_schema.representation,representation>>. A <<express:presentation_appearance_schema.styled_item,styled_item>> instance is an item in the same <<express:representation_schema.representation,representation>>. That <<express:presentation_appearance_schema.styled_item,styled_item>> has the <<express:geometric_model_schema.geometric_curve_set,geometric_curve_set>> as its item, and a <<express:presentation_appearance_schema.presentation_style_assignment,presentation_style_assignment>> with a <<express:presentation_appearance_schema.curve_style,curve_style>> which has a colour of blue. An instance of *over_riding_styled_item* is also an item in the same representation. That *over_riding_styled_item* has the circle instance as its item, the <<express:presentation_appearance_schema.styled_item,styled_item>> instance as its *over_ridden_style*, and a <<express:presentation_appearance_schema.presentation_style_assignment,presentation_style_assignment>> with a <<express:presentation_appearance_schema.curve_style,curve_style>> which has a colour of red. The red colour for the circle takes precedence over the blue colour of the <<express:geometric_model_schema.geometric_curve_set,geometric_curve_set>> for a presentation of the <<express:geometric_model_schema.geometric_curve_set,geometric_curve_set>>.
*)

(*"presentation_appearance_schema.over_riding_styled_item.over_ridden_style"
the <<express:presentation_appearance_schema.styled_item,styled_item>> that will have its style overridden.
*)


(*"presentation_appearance_schema.context_dependent_over_riding_styled_item"
A **context_dependent_over_riding_styled_item** is a type of <<express:presentation_appearance_schema.over_riding_styled_item,over_riding_styled_item>> where the style assignment takes precedence over another assigned style based on a <<express:representation_schema.representation,representation>>, <<express:representation_schema.representation_item,representation_item>>, or combination of <<express:representation_schema.representation,representation>> and <<express:representation_schema.representation_item,representation_item>> in which the item being styled is used.
*)

(*"presentation_appearance_schema.context_dependent_over_riding_styled_item.__example"
A circle instance is used by <<express:geometric_model_schema.geometric_curve_set,geometric_curve_set>> instance 1 which is an item in <<express:representation_schema.representation,representation>> instance 1. In this example the instance of circle represents the head of a screw in a door hinge. A <<express:presentation_appearance_schema.styled_item,styled_item>> instance is an item in <<express:representation_schema.representation,representation>> instance 1. That <<express:presentation_appearance_schema.styled_item,styled_item>> has the <<express:geometric_model_schema.geometric_curve_set,geometric_curve_set>> as its item, and a <<express:presentation_appearance_schema.presentation_style_assignment,presentation_style_assignment>> with a <<express:presentation_appearance_schema.curve_style,curve_style>> which has a colour of blue. The <<express:representation_schema.representation,representation>> instance 1 is included in <<express:representation_schema.representation,representation>> instance 2 through the use of <<express:representation_schema.representation_map,representation_map>> instance 1 and <<express:representation_schema.mapped_item,mapped_item>> instance 1, as one hinge on a door. The <<express:representation_schema.representation,representation>> instance 1 is included in a different location in <<express:representation_schema.representation,representation>> instance 2 through <<express:representation_schema.representation_map,representation_map>> 2 and <<express:representation_schema.mapped_item,mapped_item>> instance 2 as a second hinge. An instance of *context_dependent_over_riding_styled_item* is also an item in <<express:representation_schema.representation,representation>> instance 2. That *context_dependent_over_riding_styled_item* has the circle instance as its item, the <<express:presentation_appearance_schema.styled_item,styled_item>> instance as its <<express:presentation_appearance_schema.over_riding_styled_item.over_ridden_style,over_ridden_style>>, a <<express:presentation_appearance_schema.presentation_style_assignment,presentation_style_assignment>> with a <<express:presentation_appearance_schema.curve_style,curve_style>> which has a colour of red, and a *style_context* of <<express:representation_schema.mapped_item,mapped_item>> instance 1. The red color for the circle takes precedence over the blue color of the <<express:geometric_model_schema.geometric_curve_set,geometric_curve_set>> for a <<express:representation_schema.representation,representation>> of the <<express:geometric_model_schema.geometric_curve_set,geometric_curve_set>> as it is included in the presentation through <<express:representation_schema.mapped_item,mapped_item>> instance 1. A presentation of <<express:representation_schema.representation,representation>> instance 2 would have the <<express:geometric_model_schema.geometric_curve_set,geometric_curve_set>> presented in two different places, the first having a red screw head and all the other curves blue, the second having all the curves blue.
*)

(*"presentation_appearance_schema.context_dependent_over_riding_styled_item.style_context"
a list of one or more contexts for the overriding of the overridden style.
*)


(*"presentation_appearance_schema.context_dependent_over_riding_styled_item.wr:WR1"
There shall be only one <<express:representation_schema.representation_item,representation_item>> or all **style_context** s are <<express:representation_schema.mapped_item,mapped_item>> or all **style_context** s are <<express:product_property_representation_schema.context_dependent_shape_representation,context_dependent_shape_representation>> or <<express:representation_schema.representation_relationship,representation_relationship>>.
*)


(*"presentation_appearance_schema.presentation_style_assignment"
A **presentation_style_assignment** is a type of <<express:representation_schema.founded_item,founded_item>>. A **presentation_style_assignment** is a set of styles which are assigned to a <<express:representation_schema.representation_item,representation_item>> for the purpose of presenting the item. Style definitions have an effect only on the appearance of an element of a special type. Surface style has only an effect on surfaces. Fill area style and curve style have only an effect on curves and surfaces. Point style has an effect on points, curves, and surfaces. Text style has only an effect on the appearance of annotation text. Symbol style has only an effect on symbols.
*)

(*"presentation_appearance_schema.presentation_style_assignment.__example"
If a line is given a style which is a curve style, it shall appear. If a line is given both curve and point style, both the curve and its related cartesian points shall appear.
*)

(*"presentation_appearance_schema.presentation_style_assignment.styles"
the set of presentation styles that are assigned to a <<express:representation_schema.representation_item,representation_item>>.
*)


(*"presentation_appearance_schema.presentation_style_assignment.wr:WR1"
The same style shall not appear more than once in the set of styles, except for <<express:presentation_appearance_schema.externally_defined_style,externally_defined_style>> and <<express:presentation_appearance_schema.surface_style_usage,surface_style_usage>>.
*)


(*"presentation_appearance_schema.presentation_style_assignment.wr:WR2"
The <<express:presentation_appearance_schema.surface_style_usage,surface_style_usage>> shall not occur more than twice in the set of styles.
*)


(*"presentation_appearance_schema.presentation_style_assignment.wr:WR3"
If there are two instances of <<express:presentation_appearance_schema.surface_style_usage,surface_style_usage>> in the set of styles, each shall specify the style for opposite sides of the surface being styled.
*)


(*"presentation_appearance_schema.presentation_style_assignment.wr:IP1"
Externally defined styles shall not conflict with other styles in the same **presentation_style_assignment** entity, including other externally defined styles.
*)


(*"presentation_appearance_schema.presentation_style_assignment.wr:IP1.__note"
For one style to conflict with the other, it specifies a different style for the same characteristic, such as colour or width. For example, one style might say blue, the other green, and both be applied to the same entity.
*)

(*"presentation_appearance_schema.presentation_style_by_context"
A **presentation_style_by_context** is a type of <<express:presentation_appearance_schema.presentation_style_assignment,presentation_style_assignment>> which is assigned to a <<express:representation_schema.representation_item,representation_item>> and is applicable only in a specified presentation context.
*)


(*"presentation_appearance_schema.presentation_style_by_context.style_context"
the presentation context in which a style is assigned to a <<express:representation_schema.representation_item,representation_item>>.
*)


(*"presentation_appearance_schema.single_texture_style_tessellation_specification"
A **single_texture_style_tessellation_specification** is a type of <<express:presentation_appearance_schema.texture_style_tessellation_specification,texture_style_tessellation_specification>> that defines a visual texture. The **texture_coordinates** is an array, whose elements are implicitly associated to coordinates in the tessellated geometry that is associated with this entity when it is used. The texture is defined in an external file.
*)


(*"presentation_appearance_schema.single_texture_style_tessellation_specification.texture_image"
the name of the external image file containing the texture to be mapped to a <<express:presentation_appearance_schema.tessellated_face_or_tessellated_surface_set,tessellated_face_or_tessellated_surface_set>> .
*)


(*"presentation_appearance_schema.single_texture_style_tessellation_specification.texture_image.__note"
The name should include the format extension corresponding to one of the formats enumerated in <<express:presentation_appearance_schema.texture_file_type,texture_file_type>>.
*)

(*"presentation_appearance_schema.single_texture_style_tessellation_specification.texture_coordinates"
the list of (U,V) texture coordinates associated to the 3D coordinates of the points of the associated tessellated geometry. When the texture is mapped on a <<express:geometric_model_schema.tessellated_face,tessellated_face>> without <<express:geometric_model_schema.triangulated_face.pnindex,pnindex>>, the first element of the list is the texture (U,V) value of the first point of the associated <<express:geometric_model_schema.coordinates_list,coordinates_list>>. When the texture is mapped on a <<express:geometric_model_schema.tessellated_face,tessellated_face>> with <<express:geometric_model_schema.triangulated_face.pnindex,pnindex>> , the first element of the list is the texture (U,V) value of the first point indicated by <<express:geometric_model_schema.triangulated_face.pnindex,pnindex>>. When the texture is mapped on a <<express:geometric_model_schema.tessellated_surface_set,tessellated_surface_set>>, the first element of the list is the texture (U,V) value of the first point of the associated <<express:geometric_model_schema.coordinates_list,coordinates_list>>.
*)


(*"presentation_appearance_schema.single_texture_style_tessellation_specification.texture_format"
the name of the format extension of the external image file containing the texture to be mapped to the <<express:presentation_appearance_schema.tessellated_face_or_tessellated_surface_set,tessellated_face_or_tessellated_surface_set>>.
*)


(*"presentation_appearance_schema.single_texture_style_tessellation_specification.repeating_pattern"
when **repeating_pattern** is FALSE, U and V value range for **texture_coordinates** shall be 0.0 to 1.0, where (0,0) is the bottom-left corner and (1,1) is the top-right corner of the texture image. When **repeating_pattern** is TRUE, U and V values greater than 0.0 are permitted; in this case the integer part is subtracted to obtain a number in a range 0.0 to 1.0 for the texture mapping.
*)


(*"presentation_appearance_schema.pre_defined_presentation_style"
A **pre_defined_presentation_style** is a type of <<express:representation_schema.founded_item,founded_item>> and a type of <<express:external_reference_schema.pre_defined_item,pre_defined_item>>. A **pre_defined_presentation_style** may be used to fix certain application-specific aspects of appearance attributes defined in this schema.
*)


(*"presentation_appearance_schema.pre_defined_presentation_style.__note"
Application Resources or Application Protocols specify the use of this entity.
*)

(*"presentation_appearance_schema.externally_defined_style"
An **externally_defined_style** is a type of <<express:external_reference_schema.externally_defined_item,externally_defined_item>> and a type of <<express:representation_schema.founded_item,founded_item>>. An **externally_defined_style** is an external reference to a presentation style.
*)


(*"presentation_appearance_schema.point_style"
A **point_style** is a type of <<express:representation_schema.founded_item,founded_item>>. A **point_style** specifies the visual appearance of points.
*)


(*"presentation_appearance_schema.point_style.wr:WR1"
at least one of the OPTIONAL attributes **marker**, **marker_style** or **marker_colour** shall exist.
*)


(*"presentation_appearance_schema.point_style.name"
the word, or group of words, by which the **point_style** is referred to.
*)


(*"presentation_appearance_schema.point_style.marker"
the kind of marker which shall be used to present a point.
*)


(*"presentation_appearance_schema.point_style.marker_size"
the size in <<express:presentation_organization_schema.presentation_area,presentation_area>> units used for drawing the marker.
*)


(*"presentation_appearance_schema.point_style.marker_colour"
the <<express:presentation_resource_schema.colour,colour>> to be applied to the marker.
*)


(*"presentation_appearance_schema.pre_defined_marker"
A **pre_defined_marker** is a type of <<express:external_reference_schema.pre_defined_item,pre_defined_item>>. A **pre_defined_marker** may be used to define an application-specific marker symbol.
*)


(*"presentation_appearance_schema.pre_defined_marker.__note"
Application Resources or Application Protocols specify the use of this entity.
*)

(*"presentation_appearance_schema.pre_defined_size"
A **pre_defined_size** is a type of <<express:external_reference_schema.pre_defined_item,pre_defined_item>>. A **pre_defined_size** may be used to define an application-specific size for markers.
*)


(*"presentation_appearance_schema.pre_defined_size.__note"
Application Resources or Application Protocols specify the use of this entity.
*)

(*"presentation_appearance_schema.curve_style"
A **curve_style** is a type of <<express:representation_schema.founded_item,founded_item>>. A **curve_style** specifies the visual appearance of a curve.
*)


(*"presentation_appearance_schema.curve_style.curve_width"
the width of the visible part of the presented curve in <<express:presentation_organization_schema.presentation_area,presentation_area>> units.
*)


(*"presentation_appearance_schema.curve_style.curve_font"
the <<express:presentation_appearance_schema.curve_style_font,curve_style_font>>, scaled <<express:presentation_appearance_schema.curve_style_font,curve_style_font>>, <<express:presentation_appearance_schema.pre_defined_curve_font,pre_defined_curve_font>>, scaled <<express:presentation_appearance_schema.pre_defined_curve_font,pre_defined_curve_font>>, <<express:presentation_appearance_schema.externally_defined_curve_font,externally_defined_curve_font>>, or scaled <<express:presentation_appearance_schema.externally_defined_curve_font,externally_defined_curve_font>> which is used to present a curve.
*)


(*"presentation_appearance_schema.curve_style.name"
the word, or group of words, by which the **curve_style** is referred to.
*)


(*"presentation_appearance_schema.curve_style.curve_colour"
the <<express:presentation_resource_schema.colour,colour>> of the visible part of the curve.
*)


(*"presentation_appearance_schema.curve_style.wr:WR1"
At least one of <<express:presentation_appearance_schema.curve_style.curve_font,curve_font>>, <<express:presentation_appearance_schema.curve_style.curve_width,curve_width>> or <<express:presentation_appearance_schema.curve_style.curve_colour,curve_colour>> shall be defined.
*)


(*"presentation_appearance_schema.curve_style_with_ends_and_corners"
A **curve_style_with_ends_and_corners** is a type of <<express:presentation_appearance_schema.curve_style,curve_style>> which specifies the visual appearance of the ends and corners of a curve.
*)


(*"presentation_appearance_schema.curve_style_with_ends_and_corners.curve_ends"
an indication of how to present the ends of a curve.
*)


(*"presentation_appearance_schema.curve_style_with_ends_and_corners.curve_corners"
an indication of how to present the corners of a curve.
*)


(*"presentation_appearance_schema.curve_style_with_ends_and_corners.wr:WR1"
A value for <<express:presentation_appearance_schema.curve_style.curve_width,curve_width>> shall be provided.
*)


(*"presentation_appearance_schema.curve_style_with_extension"
A **curve_style_with_extension** is a type of <<express:presentation_appearance_schema.curve_style,curve_style>> that indicates how the curve ends shall appear when presented, either extended or shortened.
*)


(*"presentation_appearance_schema.curve_style_with_extension.curve_extensions"
a <<express:measure_schema.length_measure,length_measure>> indicating how to lengthen or shorten the ends of a curve. If the <<express:measure_schema.length_measure,length_measure>> is positive, the curve shall be extended at both ends in a tangential direction by the specified length in <<express:presentation_organization_schema.presentation_area,presentation_area>> units. If the <<express:measure_schema.length_measure,length_measure>> is negative, the curve shall be shortened by the absolute value of the specified length in <<express:presentation_organization_schema.presentation_area,presentation_area>> units.
*)

(*"presentation_appearance_schema.curve_style_with_extension.curve_extensions.__figure"
[[figure-presentation_appearance_schema-fig_curve_style_with_extension]]
====
image::curve_style_with_extension.gif[]
====
*)

(*"presentation_appearance_schema.curve_style_with_extension.curve_extensions.__note"
See figure 22.
*)

(*"presentation_appearance_schema.curve_style_with_extension.wr:WR1"
A value for <<express:presentation_appearance_schema.curve_style.curve_width,curve_width>> shall be provided.
*)


(*"presentation_appearance_schema.draughting_pre_defined_curve_font"
A **draughting_pre_defined_curve_font** is a type of <<express:presentation_appearance_schema.pre_defined_curve_font,pre_defined_curve_font>> that is identified by name. 

Table 1 states the lengths of each line segment and space, in millimetres, corresponding to each of the predefined curve fonts that are specified in this part of ISO 10303. If the <<express:presentation_appearance_schema.pre_defined_curve_font,pre_defined_curve_font>> is used as part of the definition of a <<express:presentation_appearance_schema.curve_style_font_and_scaling,curve_style_font_and_scaling>>, then the given lengths are those when the <<express:presentation_appearance_schema.curve_style_font_and_scaling.curve_font_scaling,curve_font_scaling>> attribute has the value 1.0.
*)

(*"presentation_appearance_schema.draughting_pre_defined_curve_font.__figure"
[[figure-presentation_appearance_schema-fig_illustration_of_predefined_curve_fonts]]
====
image::illustration_of_predefined_curve_fonts.gif[]
====
*)
(*"presentation_appearance_schema.draughting_pre_defined_curve_font.__table"
[[table-table-presentation_appearance_schema-table_1]]
.Line segment and space lengths for predefined curve fonts
|===
| Curve pattern name | Segment(mm) | Space (mm) | Segment (mm) | Space (mm) | Segment (mm) | Space (mm) | Number of segments

| Continuous |  |  |  |  |  |  | 0
| Dashed | 4.0 | 1.5 |  |  |  |  | 2
| Chain | 7.0 | 1.0 | 1.0 | 1.0 |  |  | 4
| Chain double dash | 7.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 6
| Dotted | 1.0 | 1.0 |  |  |  |  | 2

|===
*)

(*"presentation_appearance_schema.draughting_pre_defined_curve_font.__note"
The <<express:presentation_appearance_schema.curve_style_font_and_scaling,curve_style_font_and_scaling>> is defined in ISO 10303-46.
*)

(*"presentation_appearance_schema.draughting_pre_defined_curve_font.__note"
Illustrations of curve fonts are given in Figure 23.
*)

(*"presentation_appearance_schema.draughting_pre_defined_curve_font.wr:WR1"
The <<express:external_reference_schema.pre_defined_item.name,name>> of the **draughting_pre_defined_curve_font** shall be ’continuous’, ’chain’, ’chain double dash’, ’dashed’, or ’dotted’.
*)


(*"presentation_appearance_schema.pre_defined_curve_font"
A **pre_defined_curve_font** is a type of <<express:external_reference_schema.pre_defined_item,pre_defined_item>>. A **pre_defined_curve_font** may be used to define application-specific curve fonts.
*)


(*"presentation_appearance_schema.pre_defined_curve_font.__note"
Application Resources or Application Protocols specify the use of this entity.
*)

(*"presentation_appearance_schema.externally_defined_curve_font"
An **externally_defined_curve_font** is a type of <<express:external_reference_schema.externally_defined_item,externally_defined_item>>. An **externally_defined_curve_font** makes an external reference to a curve font.
*)


(*"presentation_appearance_schema.curve_style_font"
A **curve_style_font** is a type of <<express:representation_schema.founded_item,founded_item>>. A **curve_style_font** combines several <<express:presentation_appearance_schema.curve_style_font_pattern,curve_style_font_pattern>> into a pattern. The resulting pattern is repeated along the curve.
*)


(*"presentation_appearance_schema.curve_style_font.pattern_list"
a list of <<express:presentation_appearance_schema.curve_style_font_pattern,curve_style_font_pattern>> that contains the patterns used for drawing curves. The patterns are applied in the order in which they occur in the list.
*)


(*"presentation_appearance_schema.curve_style_font.name"
the word, or group of words, by which the **curve_style_font** is referred to.
*)


(*"presentation_appearance_schema.curve_style_font.wr:IP1"
The curve starts always with a complete pattern.
*)


(*"presentation_appearance_schema.curve_style_font.wr:IP2"
The font pattern is clipped off at the end of the curve and may therefore be incomplete.
*)


(*"presentation_appearance_schema.curve_style_font_pattern"
A **curve_style_font_pattern** is a type of <<express:representation_schema.founded_item,founded_item>>. A **curve_style_font_pattern** is a pair of visible and invisible curve segment lengths measured in <<express:presentation_organization_schema.presentation_area,presentation_area>> units.
*)


(*"presentation_appearance_schema.curve_style_font_pattern.visible_segment_length"
the length of the visible segment in the pattern definition measured in <<express:presentation_organization_schema.presentation_area,presentation_area>> units.
*)


(*"presentation_appearance_schema.curve_style_font_pattern.invisible_segment_length"
the length of the invisible segment in the pattern definition measured in <<express:presentation_organization_schema.presentation_area,presentation_area>> units.
*)


(*"presentation_appearance_schema.curve_style_wide"
A **curve_style_wide** is a type of <<express:presentation_appearance_schema.curve_style_font,curve_style_font>>. A **curve_style_wide** defines a style for filling the visible curve segments. The <<express:presentation_appearance_schema.curve_style,curve_style>> used for styling the tile curves or hatch lines is also applied to the boundary of the curve segments.
*)


(*"presentation_appearance_schema.curve_style_wide.interior_style"
the style for filling the visible curve segments with tiles or hatches.
*)


(*"presentation_appearance_schema.curve_style_curve_pattern_set"
A **curve_style_curve_pattern_set** is a type of <<express:presentation_appearance_schema.curve_style_font,curve_style_font>> and a type of <<express:geometry_schema.geometric_representation_item,geometric_representation_item>>. A **curve_style_curve_pattern_set** defines a style for filling the visible curve segments with a set of repetitive patterns. This **pattern_set** is repeated along the visible curve segments.
*)


(*"presentation_appearance_schema.curve_style_curve_pattern_set.pattern_set"
the repetitive **pattern_set** consists of a set of <<express:presentation_appearance_schema.curve_style_curve_pattern,curve_style_curve_pattern>>.
*)


(*"presentation_appearance_schema.curve_style_curve_pattern_set.wr:IP1"
The curve starts always with a complete pattern.
*)


(*"presentation_appearance_schema.curve_style_curve_pattern_set.wr:IP2"
The curve pattern is clipped off at the end of the curve and may therefore be incomplete.
*)


(*"presentation_appearance_schema.curve_style_curve_pattern"
A **curve_style_curve_pattern** is a type of <<express:geometry_schema.geometric_representation_item,geometric_representation_item>>. A **curve_style_curve_pattern** specifies a curve pattern which is used in the <<express:presentation_appearance_schema.curve_style_curve_pattern_set,curve_style_curve_pattern_set>>. The **curve_style_curve_pattern** is defined in a local pattern definition coordinate system, which will be placed along the visible segments of the derived curve. The projected curve tangent is the x axis and the normal to the projected curve is the y axis of the local pattern definition coordinate system.
*)

(*"presentation_appearance_schema.curve_style_curve_pattern.__figure"
[[figure-presentation_appearance_schema-fig_curve_style_curve_pattern]]
====
image::curve_style_curve_pattern.gif[]
====
*)

(*"presentation_appearance_schema.curve_style_curve_pattern.__note"
Figure 21 shows the definition of *curve_style_curve_pattern*.
*)

(*"presentation_appearance_schema.curve_style_curve_pattern.pattern_length"
the length of the pattern in <<express:presentation_organization_schema.presentation_area,presentation_area>> units.
*)


(*"presentation_appearance_schema.curve_style_curve_pattern.pattern"
the repetitive pattern for filling the curve. The pattern is defined as an <<express:presentation_definition_schema.annotation_curve_occurrence,annotation_curve_occurrence>> and is therefore itself associated with a presentation style.
*)


(*"presentation_appearance_schema.curve_style_font_and_scaling"
A **curve_style_font_and_scaling** is a type of <<express:representation_schema.founded_item,founded_item>>. A **curve_style_font_and_scaling** is used to apply scale to the specified <<express:presentation_appearance_schema.curve_style_font,curve_style_font>>.
*)


(*"presentation_appearance_schema.curve_style_font_and_scaling.curve_font_scaling"
the scale factor.
*)


(*"presentation_appearance_schema.curve_style_font_and_scaling.curve_font"
the **curve_font** to be scaled.
*)


(*"presentation_appearance_schema.curve_style_font_and_scaling.name"
the word, or group of words, by which the **curve_style_font_and_scaling** is referred to.
*)


(*"presentation_appearance_schema.fill_area_style"
A **fill_area_style** is a type of <<express:representation_schema.founded_item,founded_item>>. A **fill_area_style** is a style for filling visible curve segments, annotation fill areas, or surfaces with tiles or hatching.
*)


(*"presentation_appearance_schema.fill_area_style.name"
the word, or group of words, by which the **fill_area_style** is referred to.
*)


(*"presentation_appearance_schema.fill_area_style.fill_styles"
the set of fill area styles to use in presenting visible curve segments, annotation fill areas, or surfaces.
*)


(*"presentation_appearance_schema.fill_area_style.wr:WR1"
There shall be not more than one <<express:presentation_appearance_schema.fill_area_style_colour,fill_area_style_colour>> in the **fill_styles** set.
*)


(*"presentation_appearance_schema.fill_area_style_colour"
A **fill_area_style_colour** is a definition of a colour to be used for solid fill of visible curve segments, annotation fill areas, or surfaces.
*)


(*"presentation_appearance_schema.fill_area_style_colour.fill_colour"
the colour to be used for filling the area.
*)


(*"presentation_appearance_schema.fill_area_style_colour.name"
the word, or group of words, by which the **fill_area_style_colour** is referred to.
*)


(*"presentation_appearance_schema.pre_defined_hatch_style"
A **pre_defined_hatch_style** is a type of <<express:geometry_schema.geometric_representation_item,geometric_representation_item>> and a type of <<express:external_reference_schema.pre_defined_item,pre_defined_item>>. A **pre_defined_hatch_style** is a hatching style provided for Application Protocols to define an application-specific single or multiple hatching style.
*)


(*"presentation_appearance_schema.pre_defined_hatch_style.__note"
Application Resources or Application Protocols specify the use of this entity.
*)

(*"presentation_appearance_schema.externally_defined_hatch_style"
An **externally_defined_hatch_style** is a type of <<express:external_reference_schema.externally_defined_item,externally_defined_item>> and a type of <<express:geometry_schema.geometric_representation_item,geometric_representation_item>>. An **externally_defined_hatch_style** makes an external reference to a hatching style.
*)


(*"presentation_appearance_schema.fill_area_style_hatching"
A **fill_area_style_hatching** is a type of <<express:geometry_schema.geometric_representation_item,geometric_representation_item>>. A **fill_area_style_hatching** defines a styled pattern of curves for hatching visible curve segments, annotation fill areas, or surfaces.
*)

(*"presentation_appearance_schema.fill_area_style_hatching.__figure"
[[figure-presentation_appearance_schema-fig_fill_area_style_hatching]]
====
image::fill_area_style_hatching.gif[]
====
*)

(*"presentation_appearance_schema.fill_area_style_hatching.__note"
Figure 24 shows the definition of *fill_area_style_hatching*.
*)

(*"presentation_appearance_schema.fill_area_style_hatching.hatch_line_appearance"
the <<express:presentation_appearance_schema.curve_style,curve_style>> of the hatching lines. Any <<express:presentation_appearance_schema.curve_style,curve_style>> pattern shall start at the origin of each hatch line. The origin of the reference hatch line is specified by **pattern_start**. The origin of any other hatch line is determined by adding a multiple of **start_of_next_hatch_line** to **pattern_start**.
*)


(*"presentation_appearance_schema.fill_area_style_hatching.point_of_reference_hatch_line"
the origin for mapping the **fill_area_style_hatching** onto a curve, annotation fill area, or surface.
*)


(*"presentation_appearance_schema.fill_area_style_hatching.start_of_next_hatch_line"
the displacement between adjacent hatch lines, specified as a vector.
*)


(*"presentation_appearance_schema.fill_area_style_hatching.hatch_line_angle"
the angle determining the direction of the parallel hatching lines.
*)


(*"presentation_appearance_schema.fill_area_style_hatching.pattern_start"
the start point for the <<express:presentation_appearance_schema.curve_style,curve_style>> of the **point_of_reference_hatch_line**.
*)


(*"presentation_appearance_schema.pre_defined_tile_style"
A **pre_defined_tile_style** is a type of <<express:geometry_schema.geometric_representation_item,geometric_representation_item>> and a type of <<express:external_reference_schema.pre_defined_item,pre_defined_item>>. A **pre_defined_tile_style** is a tile style provided for Application Protocols to define an application-specific tile style.
*)


(*"presentation_appearance_schema.pre_defined_tile_style.__note"
Application Resources or Application Protocols specify the use of this entity.
*)

(*"presentation_appearance_schema.externally_defined_tile_style"
An **externally_defined_tile_style** is a type of <<express:external_reference_schema.externally_defined_item,externally_defined_item>> and a type of <<express:geometry_schema.geometric_representation_item,geometric_representation_item>>. An **externally_defined_tile_style** makes an external reference to a tiling style.
*)


(*"presentation_appearance_schema.fill_area_style_tiles"
A **fill_area_style_tiles** is a type of <<express:geometry_schema.geometric_representation_item,geometric_representation_item>>. A **fill_area_style_tiles** defines a two-dimensional tile to be used for the filling of annotation fill areas or other closed regions. The content of a tile is defined by the **tiles** set, and the placement of each tile is determined by the **tiling_pattern** which indicates how to place tiles next to each other. Tiles or parts of tiles outside the annotation fill area or closed region shall be clipped at the boundaries of the area or region.
*)


(*"presentation_appearance_schema.fill_area_style_tiles.tiling_scale"
the scaling factor applied to each tile as it is placed in the <<express:presentation_definition_schema.annotation_fill_area,annotation_fill_area>>.
*)


(*"presentation_appearance_schema.fill_area_style_tiles.tiling_pattern"
the <<express:presentation_appearance_schema.two_direction_repeat_factor,two_direction_repeat_factor>> defining the shape and relative positioning of the tiles.
*)


(*"presentation_appearance_schema.fill_area_style_tiles.tiles"
the set of constituents of the tile.
*)


(*"presentation_appearance_schema.fill_area_style_tile_curve_with_style"
A **fill_area_style_tile_curve_with_style** is a type of <<express:geometry_schema.geometric_representation_item,geometric_representation_item>>. A **fill_area_style_tile_curve_with_style** contains a styled curve which acts as a constituent in a <<express:presentation_appearance_schema.fill_area_style_tiles,fill_area_style_tiles>>.
*)


(*"presentation_appearance_schema.fill_area_style_tile_curve_with_style.styled_curve"
the two-dimensional styled curve defined in the local coordinate system of a fill area tile.
*)


(*"presentation_appearance_schema.fill_area_style_tile_coloured_region"
A **fill_area_style_tile_coloured_region** is a type of <<express:geometry_schema.geometric_representation_item,geometric_representation_item>>. A **fill_area_style_tile_coloured_region** is a closed curve that is filled with a colour and acts as a constituent in a <<express:presentation_appearance_schema.fill_area_style_tiles,fill_area_style_tiles>>.
*)


(*"presentation_appearance_schema.fill_area_style_tile_coloured_region.closed_curve"
the closed curve which defines a coloured region. The referenced curve may also be associated with style.
*)


(*"presentation_appearance_schema.fill_area_style_tile_coloured_region.region_colour"
the <<express:presentation_resource_schema.colour,colour>> of that region which is defined by the interior of the closed curve.
*)


(*"presentation_appearance_schema.fill_area_style_tile_coloured_region.wr:WR1"
The **closed_curve** shall be closed and not self-intersecting.
*)


(*"presentation_appearance_schema.fill_area_style_tile_symbol_with_style"
A **fill_area_style_tile_symbol_with_style** is a type of <<express:geometry_schema.geometric_representation_item,geometric_representation_item>>. A **fill_area_style_tile_symbol_with_style** is a symbol which acts as a constituent in a <<express:presentation_appearance_schema.fill_area_style_tiles,fill_area_style_tiles>>.
*)


(*"presentation_appearance_schema.fill_area_style_tile_symbol_with_style.symbol"
a styled annotation symbol.
*)


(*"presentation_appearance_schema.pre_defined_tile"
A **pre_defined_tile** is a type of <<express:external_reference_schema.pre_defined_item,pre_defined_item>>. A **pre_defined_tile** may be used to define an application-specific tile.
*)


(*"presentation_appearance_schema.pre_defined_tile.__note"
Application Resources or Application Protocols specify the use of this entity.
*)

(*"presentation_appearance_schema.externally_defined_tile"
An **externally_defined_tile** is a type of <<express:external_reference_schema.externally_defined_item,externally_defined_item>>. An **externally_defined_tile** is a tile that is defined by reference to some external source.
*)


(*"presentation_appearance_schema.one_direction_repeat_factor"
A **one_direction_repeat_factor** is a type of <<express:geometry_schema.geometric_representation_item,geometric_representation_item>>. A **one_direction_repeat_factor** is a vector used in a <<express:presentation_appearance_schema.fill_area_style_hatching,fill_area_style_hatching>> for determining the origin of a repeated hatch line relative to the origin of the previous hatch line. Given the initial position _I_ of any hatch line, the **one_direction_repeat_factor** _R_ determines two new positions according to the expression: image::one_direction_repeat_factor_expression.gif[]
*)

(*"presentation_appearance_schema.one_direction_repeat_factor.__figure"
[[figure-presentation_appearance_schema-fig_one_direction_repeat_factor]]
====
image::one_direction_repeat_factor.gif[]
====
*)

(*"presentation_appearance_schema.one_direction_repeat_factor.__note"
Figure 25 shows the positions defined by a *one_direction_repeat_factor*.
*)

(*"presentation_appearance_schema.one_direction_repeat_factor.repeat_factor"
the <<express:geometry_schema.vector,vector>> which specifies the relative positioning of hatch lines.
*)


(*"presentation_appearance_schema.two_direction_repeat_factor"
A **two_direction_repeat_factor** is a type of <<express:presentation_appearance_schema.one_direction_repeat_factor,one_direction_repeat_factor>>. A **two_direction_repeat_factor** combines two vectors which are used in a <<express:presentation_appearance_schema.fill_area_style_tiles,fill_area_style_tiles>> for determining the shape and relative location of tiles. Given the initial position _I_ of any tile, the **two_direction_repeat_factor** _R = (R1, R2)_ determines eight new positions according to the expression: image::two_direction_repeat_factor_expression.gif[]
*)

(*"presentation_appearance_schema.two_direction_repeat_factor.__figure"
[[figure-presentation_appearance_schema-fig_two_direction_repeat_factor]]
====
image::two_direction_repeat_factor.gif[]
====
*)

(*"presentation_appearance_schema.two_direction_repeat_factor.__note"
Figure 27 shows the positions defined by a *two_direction_repeat_factor*.
*)

(*"presentation_appearance_schema.two_direction_repeat_factor.second_repeat_factor"
the vector which specifies the relative positioning of tiles in the second direction.
*)


(*"presentation_appearance_schema.surface_style_usage"
A **surface_style_usage** is a type of <<express:representation_schema.founded_item,founded_item>>. A **surface_style_usage** is the application of a <<express:presentation_appearance_schema.surface_side_style_select,surface_side_style_select>> to the positive side, negative side, or both sides of a surface.
*)


(*"presentation_appearance_schema.surface_style_usage.side"
the indication of which side of the surface to apply the style.
*)


(*"presentation_appearance_schema.surface_style_usage.style"
the style which shall be applied to the surface.
*)


(*"presentation_appearance_schema.pre_defined_surface_side_style"
A **pre_defined_surface_side_style** is a type of <<express:external_reference_schema.pre_defined_item,pre_defined_item>>. A **pre_defined_surface_side_style** may be used to define an application-specific <<express:presentation_appearance_schema.surface_side_style,surface_side_style>>.
*)


(*"presentation_appearance_schema.pre_defined_surface_side_style.__note"
Application Resources or Application Protocols specify the use of this entity.
*)

(*"presentation_appearance_schema.surface_side_style"
A **surface_side_style** is a type of <<express:representation_schema.founded_item,founded_item>>. A **surface_side_style** is a collection of surface styles used in the presentation of the side of a surface.
*)


(*"presentation_appearance_schema.surface_side_style.name"
the word, or group of words, by which the **surface_side_style** is referred to.
*)


(*"presentation_appearance_schema.surface_side_style.styles"
a collection of different surface styles.
*)


(*"presentation_appearance_schema.surface_side_style.wr:WR1"
All of the **styles** shall be of different types.
*)


(*"presentation_appearance_schema.surface_style_fill_area"
A **surface_style_fill_area** is a type of <<express:representation_schema.founded_item,founded_item>>. A **surface_style_fill_area** is the surface style that presents a surface by mapping a fill area onto the surface.
*)


(*"presentation_appearance_schema.surface_style_fill_area.fill_area"
the <<express:presentation_appearance_schema.fill_area_style,fill_area_style>> associated with the two-dimensional parameter space of a surface that will be mapped onto the surface itself.
*)


(*"presentation_appearance_schema.surface_style_boundary"
A **surface_style_boundary** is a type of <<express:representation_schema.founded_item,founded_item>>. A **surface_style_boundary** is the surface style that is applied to the boundary curves of a surface.
*)


(*"presentation_appearance_schema.surface_style_boundary.style_of_boundary"
the style for the boundary curves of a surface.
*)


(*"presentation_appearance_schema.curve_style_rendering"
A **curve_style_rendering** is allowing the visualization of curves on a surface by application of rendering techniques.
*)


(*"presentation_appearance_schema.curve_style_rendering.rendering_method"
specifies the method which shall be used for interpolating colours along curves on a surface.
*)


(*"presentation_appearance_schema.curve_style_rendering.rendering_properties"
specifies the rendering properties of the surface which contains the curves.
*)


(*"presentation_appearance_schema.surface_rendering_properties"
A **surface_rendering_properties** is a definition of those properties of a surface which are required to compute a realistic visualization of surfaces by use of rendering techniques.
*)


(*"presentation_appearance_schema.surface_rendering_properties.rendered_colour"
the presentation <<express:presentation_resource_schema.colour,colour>> of a surface for use during the rendering process.
*)


(*"presentation_appearance_schema.surface_style_silhouette"
A **surface_style_silhouette** is a type of <<express:representation_schema.founded_item,founded_item>>. A **surface_style_silhouette** is the surface style that is applied to the silhouette curves of a surface.
*)


(*"presentation_appearance_schema.surface_style_silhouette.style_of_silhouette"
the style for the silhouette curves within a surface.
*)


(*"presentation_appearance_schema.surface_style_segmentation_curve"
A **surface_style_segmentation_curve** is a type of <<express:representation_schema.founded_item,founded_item>>. A **surface_style_segmentation_curve** is the surface style that is applied to the curves on the segment borders of a surface.
*)


(*"presentation_appearance_schema.surface_style_segmentation_curve.style_of_segmentation_curve"
the style for the segmentation curves of a surface.
*)


(*"presentation_appearance_schema.surface_style_segmentation_curve.style_of_segmentation_curve.__note"
This style has only an effect on surfaces which have segmentation curves. These surfaces include the following types:



* B-spline surfaces;
* rectangular trimmed surfaces, curve bounded surfaces, rectangular composite surfaces, surface patches, offset surfaces, and surface replicas which refer to a B-spline surface as basis or parent surface.
*)

(*"presentation_appearance_schema.surface_style_control_grid"
A **surface_style_control_grid** is a type of <<express:representation_schema.founded_item,founded_item>>. A **surface_style_control_grid** is the surface style that is applied to the mesh of control points which are used for definition of surfaces.
*)


(*"presentation_appearance_schema.surface_style_control_grid.style_of_control_grid"
the style for the control grid of a surface.
*)


(*"presentation_appearance_schema.surface_style_control_grid.style_of_control_grid.__note"
This style has only an effect on surfaces which are defined over a mesh of control points. These surfaces include the following types:



* B-spline surfaces;
*  rectangular trimmed surfaces, curve bounded surfaces, rectangular composite surfaces, surface patches, offset surfaces, and surface replicas which refer to a B-spline surface as basis or parent surface.
*)

(*"presentation_appearance_schema.surface_style_parameter_line"
A **surface_style_parameter_line** is a type of <<express:representation_schema.founded_item,founded_item>>. A **surface_style_parameter_line** is the surface style that is applied to the iso-parameter lines on a surface.
*)


(*"presentation_appearance_schema.surface_style_parameter_line.style_of_parameter_lines"
the style for the iso-parameter curves of a surface.
*)


(*"presentation_appearance_schema.surface_style_parameter_line.direction_counts"
a set of <<express:presentation_appearance_schema.u_direction_count,u_direction_count>> and <<express:presentation_appearance_schema.v_direction_count,v_direction_count>> indicating the number of iso-parameter curves in the u and v directions.
*)


(*"presentation_appearance_schema.surface_style_parameter_line.wr:WR1"
If there are two members of the **direction_counts** set, they shall not be of the same type.
*)


(*"presentation_appearance_schema.surface_style_rendering"
A **surface_style_rendering** is the realistic visualization of surfaces by use of rendering techniques. The effect of the reflectance calculation shall be as if the calculation is performed in the coordinate-system in which the <<express:presentation_organization_schema.camera_model,camera_model>> is founded.
*)


(*"presentation_appearance_schema.surface_style_rendering.rendering_method"
the method for interpolating colours across surfaces.
*)


(*"presentation_appearance_schema.surface_style_rendering.surface_colour"
the <<express:presentation_resource_schema.colour,colour>> used to render the surface.
*)


(*"presentation_appearance_schema.surface_style_rendering_with_properties"
A **surface_style_rendering_with_properties** is a type of <<express:presentation_appearance_schema.surface_style_rendering,surface_style_rendering>>. A **surface_style_rendering_with_properties** allows the realistic visualization of surfaces with properties which determine transparency and reflection characteristics.
*)


(*"presentation_appearance_schema.surface_style_rendering_with_properties.properties"
the collection of rendering properties for a surface.
*)


(*"presentation_appearance_schema.surface_style_rendering_with_properties.wr:WR1"
All of the **properties** shall be of different types.
*)


(*"presentation_appearance_schema.surface_style_reflectance_ambient"
A **surface_style_reflectance_ambient** is a specification of the ambient part of the reflectance behaviour of a surface.
*)


(*"presentation_appearance_schema.surface_style_reflectance_ambient.__note"
The reflectance calculation is conceptually applied at one or more points on a surface being lit and shaded and produces a colour at such points. Input to the reflectance calculation includes the position at which the reflectance equation is to be applied, the surface normal, the surface colour at that position, the light sources, and the three-dimensional camera model.
*)

(*"presentation_appearance_schema.surface_style_reflectance_ambient.__note"
Suggested reflectance equations can be found in Annex E.
*)

(*"presentation_appearance_schema.surface_style_reflectance_ambient.ambient_reflectance"
the reflectance coefficient for the ambient part of the reflectance equation.
*)


(*"presentation_appearance_schema.surface_style_reflectance_ambient_diffuse"
A **surface_style_reflectance_ambient_diffuse** is a type of <<express:presentation_appearance_schema.surface_style_reflectance_ambient,surface_style_reflectance_ambient>>. A **surface_style_reflectance_ambient_diffuse** specifies the diffuse part of the reflectance behaviour of a surface.
*)


(*"presentation_appearance_schema.surface_style_reflectance_ambient_diffuse.__note"
Suggested reflectance equations can be found in Annex E.
*)

(*"presentation_appearance_schema.surface_style_reflectance_ambient_diffuse.diffuse_reflectance"
the reflectance coefficient for the diffuse part of the reflectance equation.
*)


(*"presentation_appearance_schema.surface_style_reflectance_ambient_diffuse_specular"
A **surface_style_reflectance_ambient_diffuse_specular** is a type of <<express:presentation_appearance_schema.surface_style_reflectance_ambient_diffuse,surface_style_reflectance_ambient_diffuse>>. A **surface_style_reflectance_ambient_diffuse_specular** specifies the specular part of the reflectance behaviour of a surface.
*)


(*"presentation_appearance_schema.surface_style_reflectance_ambient_diffuse_specular.__note"
Suggested reflectance equations can be found in Annex E.
*)

(*"presentation_appearance_schema.surface_style_reflectance_ambient_diffuse_specular.specular_reflectance"
the reflectance coefficient for the specular part of the reflectance equation.
*)


(*"presentation_appearance_schema.surface_style_reflectance_ambient_diffuse_specular.specular_exponent"
the exponent for the specular part of the reflectance equation.
*)


(*"presentation_appearance_schema.surface_style_reflectance_ambient_diffuse_specular.specular_colour"
the <<express:presentation_resource_schema.colour,colour>> for the specular part of the reflectance equation.
*)


(*"presentation_appearance_schema.surface_style_transparent"
A **surface_style_transparent** is the surface rendering property that specifies the degree of transparency of a surface.
*)


(*"presentation_appearance_schema.surface_style_transparent.transparency"
the degree of transparency indicated by the percentage of light traversing the surface.
*)


(*"presentation_appearance_schema.surface_style_transparent.wr:WR1"
The transparency shall be between 0.0 and 1.0.
*)


(*"presentation_appearance_schema.text_style"
A **text_style** is a type of <<express:representation_schema.founded_item,founded_item>>. A **text_style** is the presentation style for annotation text.
*)


(*"presentation_appearance_schema.text_style.name"
the word, or group of words, by which the **text_style** is referred to.
*)


(*"presentation_appearance_schema.text_style.character_appearance"
the character style to be used for presenting the text.
*)


(*"presentation_appearance_schema.character_glyph_style_stroke"
A **character_glyph_style_stroke** is a type of <<express:representation_schema.founded_item,founded_item>>. A **character_glyph_style_stroke** is a character glyph style for text that is made up of curves rather than closed regions.
*)


(*"presentation_appearance_schema.character_glyph_style_stroke.stroke_style"
the <<express:presentation_appearance_schema.curve_style,curve_style>> applied to the curves which define a <<express:presentation_resource_schema.character_glyph_symbol_stroke,character_glyph_symbol_stroke>>.
*)


(*"presentation_appearance_schema.character_glyph_style_outline"
A **character_glyph_style_outline** is a type of <<express:representation_schema.founded_item,founded_item>>. A **character_glyph_style_outline** is a character glyph style for text that is made up of closed regions rather than curves.
*)


(*"presentation_appearance_schema.character_glyph_style_outline.outline_style"
the <<express:presentation_appearance_schema.curve_style,curve_style>> applied to the curves which define a <<express:presentation_resource_schema.character_glyph_symbol_outline,character_glyph_symbol_outline>>.
*)


(*"presentation_appearance_schema.character_glyph_style_outline_with_characteristics"
A **character_glyph_style_outline_with_characteristics** is a type of <<express:presentation_appearance_schema.character_glyph_style_outline,character_glyph_style_outline>> with additional characteristics to be applied to the regions of the <<express:presentation_appearance_schema.character_glyph_style_outline,character_glyph_style_outline>>.
*)


(*"presentation_appearance_schema.character_glyph_style_outline_with_characteristics.characteristics"
the characteristics about the regions of the character glyph.
*)


(*"presentation_appearance_schema.text_style_for_defined_font"
A **text_style_for_defined_font** is a part of the definition of a <<express:presentation_appearance_schema.text_style,text_style>>, defining the colour in which a text to display.
*)


(*"presentation_appearance_schema.text_style_for_defined_font.text_colour"
the <<express:presentation_resource_schema.colour,colour>> to be used for presenting the text.
*)


(*"presentation_appearance_schema.text_style_with_justification"
A **text_style_with_justification** is a type of <<express:presentation_appearance_schema.text_style,text_style>> that specifies the justification of text.
*)


(*"presentation_appearance_schema.text_style_with_justification.justification"
the method of text justification in a line.
*)


(*"presentation_appearance_schema.text_style_with_box_characteristics"
A **text_style_with_box_characteristics** is a type of <<express:presentation_appearance_schema.text_style,text_style>> that specifies the characteristics of the character boxes within the text.
*)


(*"presentation_appearance_schema.text_style_with_box_characteristics.characteristics"
the characteristics of the character boxes. These characteristics determine height, width, rotation angle, and slant angle of the character boxes.
*)


(*"presentation_appearance_schema.text_style_with_box_characteristics.wr:WR1"
The **characteristics** shall be of different types.
*)


(*"presentation_appearance_schema.text_style_with_spacing"
A **text_style_with_spacing** is a type of <<express:presentation_appearance_schema.text_style,text_style>> that has a spacing defined for the characters.
*)


(*"presentation_appearance_schema.text_style_with_spacing.character_spacing"
the distance between the character boxes of adjacent characters.
*)


(*"presentation_appearance_schema.texture_style_specification"
A **texture_style_specification** is a type of <<express:representation_schema.founded_item,founded_item>> and is an abstract entity that defines a visual texture.
*)


(*"presentation_appearance_schema.texture_style_tessellation_specification"
A **texture_style_tessellation_specification** is a type of <<express:presentation_appearance_schema.texture_style_specification,texture_style_specification>> an abstract entity that defines a visual texture to be assigned to tessellated geometry.
*)


(*"presentation_appearance_schema.pre_defined_character_spacing"
A **pre_defined_character_spacing** is a type of <<express:external_reference_schema.pre_defined_item,pre_defined_item>>. A **pre_defined_character_spacing** is a character spacing for the definition of an application-specific character spacing.
*)


(*"presentation_appearance_schema.pre_defined_character_spacing.__note"
Application Resources or Application Protocols specify the use of this entity.
*)

(*"presentation_appearance_schema.text_style_with_mirror"
A **text_style_with_mirror** is a type of <<express:presentation_appearance_schema.text_style,text_style>> that has a mirroring axis defined for the characters.
*)

(*"presentation_appearance_schema.text_style_with_mirror.__figure"
[[figure-presentation_appearance_schema-fig_text_style_with_mirror]]
====
image::text_style_with_mirror.gif[]
====
*)

(*"presentation_appearance_schema.text_style_with_mirror.__note"
Figure 26 shows the definition of *text_style_with_mirror*.
*)

(*"presentation_appearance_schema.text_style_with_mirror.mirror_placement"
the placement and orientation of the mirror axis. The mirror axis passes through the <<express:location_schema.location,location>> of the <<express:geometry_schema.axis2_placement,axis2_placement>> and is parallel to the x axis defined by the <<express:geometry_schema.axis2_placement,axis2_placement>>.
*)


(*"presentation_appearance_schema.text_style_with_mirror.wr:IP1"
A **text_style_with_mirror**. **mirror_placement** shall have the <<express:geometry_schema.axis2_placement,axis2_placement>> founded in the same context as the text that is being mirrored.
*)


(*"presentation_appearance_schema.symbol_style"
A **symbol_style** is a type of <<express:representation_schema.founded_item,founded_item>>. A **symbol_style** is the presentation style that specifies the visual appearance of <<express:presentation_definition_schema.annotation_symbol,annotation_symbol>>. The style is specified as one or more styles for the constituents of the symbol, or as a colour to be used in presenting the entire symbol.
*)


(*"presentation_appearance_schema.symbol_style.name"
the word, or group of words, by which the **symbol_style** is referred to.
*)


(*"presentation_appearance_schema.symbol_style.style_of_symbol"
the <<express:presentation_appearance_schema.symbol_element_style,symbol_element_style>> or <<express:presentation_appearance_schema.symbol_colour,symbol_colour>> that specifies the visual appearance of a symbol.
*)


(*"presentation_appearance_schema.styled_tessellated_face_or_surface_with_single_texture"
A **styled_tessellated_face_or_surface_with_single_texture** is a type of <<express:presentation_appearance_schema.styled_item,styled_item>> that assigns a visual texture to tessellated geometry, which may be either a <<express:geometric_model_schema.tessellated_face,tessellated_face>> or a collection of tessellated faces defined in a <<express:geometric_model_schema.tessellated_surface_set,tessellated_surface_set>> .
*)


(*"presentation_appearance_schema.styled_tessellated_face_or_surface_with_single_texture.styles"
specifies the <<express:presentation_appearance_schema.presentation_style_assignment,presentation_style_assignment>> that specifies the texture defined by a <<express:presentation_appearance_schema.texture_style_tessellation_specification,texture_style_tessellation_specification>>.
*)


(*"presentation_appearance_schema.styled_tessellated_face_or_surface_with_single_texture.styles.__note"
The actual appearance is realized in the model by the <<express:presentation_appearance_schema.presentation_style_assignment,presentation_style_assignment>> entity referenced by the *appearance* attribute.
*)

(*"presentation_appearance_schema.styled_tessellated_face_or_surface_with_single_texture.item"
specifies the tessellated geometry to which the texture style is applied.
*)


(*"presentation_appearance_schema.styled_tessellated_face_or_surface_with_single_texture.texture_style_specification"
specifies the visual texture to be applied.
*)


(*"presentation_appearance_schema.styled_tessellated_face_or_surface_with_single_texture.wr:WR1"
the SET of **styles** shall contain only one element.
*)


(*"presentation_appearance_schema.styled_tessellated_face_or_surface_with_single_texture.wr:WR2"
if the **item** styled is a <<express:geometric_model_schema.triangulated_face,triangulated_face>> then the size of the <<express:presentation_appearance_schema.single_texture_style_tessellation_specification.texture_coordinates,texture_coordinates>> of the associated <<express:presentation_appearance_schema.single_texture_style_tessellation_specification,single_texture_style_tessellation_specification>> shall be equal to the number of points defining the <<express:geometric_model_schema.triangulated_face,triangulated_face>>; this number is obtained from either the <<express:geometric_model_schema.triangulated_face.pnindex,pnindex>> attribute of <<express:geometric_model_schema.triangulated_face,triangulated_face>> (if non-zero), or from the <<express:geometric_model_schema.coordinates_list.npoints,npoints>> attribute of the <<express:geometric_model_schema.coordinates_list,coordinates_list>> of the <<express:geometric_model_schema.triangulated_face,triangulated_face>>.
*)


(*"presentation_appearance_schema.styled_tessellated_face_or_surface_with_single_texture.wr:WR3"
if the **item** styled is a <<express:geometric_model_schema.complex_triangulated_face,complex_triangulated_face>> then the size of the <<express:presentation_appearance_schema.single_texture_style_tessellation_specification.texture_coordinates,texture_coordinates>> of the associated <<express:presentation_appearance_schema.single_texture_style_tessellation_specification,single_texture_style_tessellation_specification>> shall be equal to the number of points defining the <<express:geometric_model_schema.complex_triangulated_face,complex_triangulated_face>>; this number is obtained from either the <<express:geometric_model_schema.complex_triangulated_face.pnindex,pnindex>> attribute of <<express:geometric_model_schema.complex_triangulated_face,complex_triangulated_face>> (if non zero), or from the <<express:geometric_model_schema.coordinates_list.npoints,npoints>> attribute of the <<express:geometric_model_schema.coordinates_list,coordinates_list>> of the <<express:geometric_model_schema.complex_triangulated_face,complex_triangulated_face>>.
*)


(*"presentation_appearance_schema.styled_tessellated_face_or_surface_with_single_texture.wr:WR4"
if the **item** styled is a <<express:geometric_model_schema.tessellated_surface_set,tessellated_surface_set>> then the size of the <<express:presentation_appearance_schema.single_texture_style_tessellation_specification.texture_coordinates,texture_coordinates>> of the associated <<express:presentation_appearance_schema.single_texture_style_tessellation_specification,single_texture_style_tessellation_specification>> shall be equal to the number of points defining the <<express:geometric_model_schema.tessellated_surface_set,tessellated_surface_set>>; this number is obtained from the <<express:geometric_model_schema.coordinates_list.npoints,npoints>> attribute of the <<express:geometric_model_schema.coordinates_list,coordinates_list>> of the <<express:geometric_model_schema.tessellated_surface_set,tessellated_surface_set>>.
*)


(*"presentation_appearance_schema.styled_tessellated_face_or_surface_with_single_texture.wr:WR5"
the derived **texture_style_specification** shall be of type <<express:presentation_appearance_schema.single_texture_style_tessellation_specification,single_texture_style_tessellation_specification>>.
*)


(*"presentation_appearance_schema.symbol_element_style"
A **symbol_element_style** is a type of <<express:representation_schema.founded_item,founded_item>>. A **symbol_element_style** is the presentation style that specifies the visual appearance of the constituent parts of <<express:presentation_definition_schema.annotation_symbol,annotation_symbol>>.
*)


(*"presentation_appearance_schema.symbol_element_style.style_of_symbol"
the <<express:presentation_appearance_schema.presentation_style_assignment,presentation_style_assignment>> for the constituent parts of a symbol.
*)


(*"presentation_appearance_schema.symbol_element_style.wr:WR1"
There shall be no <<express:presentation_appearance_schema.symbol_style,symbol_style>> in the **style_of_symbol**.
*)


(*"presentation_appearance_schema.symbol_element_style.wr:WR2"
The **style_of_symbol** shall not be dependent on a context.
*)


(*"presentation_appearance_schema.symbol_colour"
A **symbol_colour** is the presentation style that specifies the colour of <<express:presentation_definition_schema.annotation_symbol,annotation_symbol>>.
*)


(*"presentation_appearance_schema.symbol_colour.colour_of_symbol"
the <<express:presentation_resource_schema.colour,colour>> for the symbol.
*)


(*"presentation_appearance_schema.approximation_tolerance"
An **approximation_tolerance** is a type of <<express:representation_schema.founded_item,founded_item>>. An **approximation_tolerance** serves the visualization requirements of every displayable element. It specifies the position and shape tolerance of the presented elements in the picture with respect to their mathematically exact projected position and shape.
*)


(*"presentation_appearance_schema.approximation_tolerance.tolerance"
the tolerances to be used for approximating curves and surfaces.
*)


(*"presentation_appearance_schema.approximation_tolerance.tolerance.__note"
If no *approximation_tolerance* is specified, the accuracy of rendering is implementation-dependent.
*)

(*"presentation_appearance_schema.approximation_tolerance_deviation"
An **approximation_tolerance_deviation** is a type of <<express:representation_schema.founded_item,founded_item>>. An **approximation_tolerance_deviation** specifies a deviation measurement for the approximation of curves and surfaces. The deviation value can be specified in product-shape or presentation-area space.
*)


(*"presentation_appearance_schema.approximation_tolerance_deviation.tessellation_type"
the selected <<express:presentation_appearance_schema.approximation_method,approximation_method>> which determines the kind of tessellation with which curves and surfaces are approximated by graphical primitives.
*)


(*"presentation_appearance_schema.approximation_tolerance_deviation.tolerances"
the set of tolerances which specify the maximum allowable deviation for the approximation of curves and surfaces.
*)


(*"presentation_appearance_schema.approximation_tolerance_deviation.definition_space"
the coordinate space in which the tolerances are specified. The tolerances can be specified in the definition space of the curve or surface to which the tolerances are applied or in the definition space of the <<express:presentation_organization_schema.presentation_area,presentation_area>> which contains the curve or surface.
*)


(*"presentation_appearance_schema.approximation_tolerance_deviation.wr:WR1"
If there are two members of the tolerances set, they shall not be of the same type.
*)


(*"presentation_appearance_schema.approximation_tolerance_parameter"
An **approximation_tolerance_parameter** is a type of <<express:representation_schema.founded_item,founded_item>>. An **approximation_tolerance_parameter** specifies an approximation tolerance for curves and surfaces in parameter space units.
*)


(*"presentation_appearance_schema.approximation_tolerance_parameter.tolerances"
the set of tolerances used for approximating curves and surfaces. Curves and surfaces are approximated in such a way that uniform steps in parameter space are taken as the basis of the approximation. The specified lengths are measured in parameter space units.
*)


(*"presentation_appearance_schema.approximation_tolerance_parameter.wr:WR1"
If there are two members of the tolerances set, they shall not be of the same type.
*)


(*"presentation_appearance_schema.occlusion_precedence"
An **occlusion_precedence** is a relationship between two entities that can hide or blank out other entities. This relationship establishes which one is to hide or blank out the other if they should overlap in a presentation. 

This relationship is transitive. If entity _A_ hides entity _B_, and entity _B_ hides entity _C_, then entity _A_ also hides entity _C_.

This relationship only applies if the two entities are in the same representation.
*)


(*"presentation_appearance_schema.occlusion_precedence.__note"
If two such entities overlap and do not participate in an *occlusion_precedence* relationship, which entity has precedence is up to the particular implementation which presents it.
*)

(*"presentation_appearance_schema.occlusion_precedence.lower_precedence"
the entity which can be blanked or hidden by the **higher_precedence** entity.
*)


(*"presentation_appearance_schema.occlusion_precedence.occlusion_context"
the <<express:representation_schema.representation,representation>> in which the precedence has meaning.
*)


(*"presentation_appearance_schema.occlusion_precedence.higher_precedence"
the entity which can blank or hide the **lower_precedence** entity.
*)


(*"presentation_appearance_schema.occlusion_precedence.wr:WR1"
An **occlusion_precedence** entity shall not participate in a tree of <<express:presentation_appearance_schema.hiding_or_blanking_select,hiding_or_blanking_select>> entities where the root of the tree is also a leaf of its own tree.
*)


(*"presentation_appearance_schema.invisibility"
An **invisibility** is specifying that a collection of one or more <<express:presentation_appearance_schema.styled_item,styled_item>>, elements assigned to a layer by <<express:presentation_appearance_schema.presentation_style_assignment,presentation_style_assignment>>, or elements of a <<express:presentation_organization_schema.presentation_representation,presentation_representation>> shall not be presented.
*)


(*"presentation_appearance_schema.invisibility.invisible_items"
a set of <<express:presentation_appearance_schema.styled_item,styled_item>>, <<express:presentation_organization_schema.presentation_layer_assignment,presentation_layer_assignment>>, or <<express:presentation_organization_schema.presentation_representation,presentation_representation>> that are denoted as being invisible.
*)


(*"presentation_appearance_schema.context_dependent_invisibility"
A **context_dependent_invisibility** is a type of <<express:presentation_appearance_schema.invisibility,invisibility>> that is applied in the context of a picture or a layer. The elements specified as invisible are invisible only in the context of the identified <<express:presentation_organization_schema.presentation_set,presentation_set>>, <<express:presentation_organization_schema.presentation_representation,presentation_representation>>, or <<express:presentation_organization_schema.presentation_layer_usage,presentation_layer_usage>>.
*)

(*"presentation_appearance_schema.context_dependent_invisibility.__example"
A symbol is included as an item in two separate views, but is to be presented in only the first view. A *context_dependent_invisibility* is used to specify that the symbol is not visible in the second view, by specifying this view as the context for the invisibility.
*)

(*"presentation_appearance_schema.context_dependent_invisibility.presentation_context"
the <<express:presentation_organization_schema.presentation_set,presentation_set>>, <<express:presentation_organization_schema.presentation_representation,presentation_representation>>, or <<express:presentation_organization_schema.presentation_layer_usage,presentation_layer_usage>> that provides the context for the specification of invisibility.
*)


(*"presentation_appearance_schema.pas_geometric_representation_item_subtypes"
A **pas_geometric_representation_item_subtypes** is a constraint that applies to instances of subtypes of <<express:geometry_schema.geometric_representation_item,geometric_representation_item>>.
*)


(*"presentation_appearance_schema.founded_item_subtypes"
A **founded_item_subtypes** is a constraint that applies to instances of subtypes of <<express:representation_schema.founded_item,founded_item>>.
*)


(*"presentation_appearance_schema.acyclic_occlusion_precedence"
The **acyclic_occlusion_precedence** function is a function which checks to see if there is any tree containing a set of <<express:presentation_appearance_schema.hiding_or_blanking_select,hiding_or_blanking_select>> and a given <<express:presentation_appearance_schema.occlusion_precedence,occlusion_precedence>> which has a <<express:presentation_appearance_schema.hiding_or_blanking_select,hiding_or_blanking_select>> which is both a root and a leaf of the same subtree. It returns TRUE if there is no such subtree, and FALSE if there is.
*)


(*"presentation_appearance_schema.acyclic_occlusion_precedence.relation"
the <<express:presentation_appearance_schema.occlusion_precedence,occlusion_precedence>> which is tested. This is input to the function.
*)


(*"presentation_appearance_schema.acyclic_occlusion_precedence.set_of_lower"
the set of items that are referenced directly or indirectly by <<express:presentation_appearance_schema.occlusion_precedence.lower_precedence,lower_precedence>> of the **relation**. This argument is input to the function. On initial input this set contains as its only element the <<express:presentation_appearance_schema.occlusion_precedence.lower_precedence,lower_precedence>> item of the **relation**.
*)


(*"presentation_appearance_schema.get_coordinate_values"
The get_coordinate_values function returns the <<express:geometric_model_schema.coordinates_list,coordinates_list>> for a <<express:geometric_model_schema.tessellated_face,tessellated_face>>, a <<express:geometric_model_schema.tessellated_shell,tessellated_shell>>, a <<express:geometric_model_schema.tessellated_solid,tessellated_solid>>, or a <<express:geometric_model_schema.tessellated_surface_set,tessellated_surface_set>>.
*)


(*"presentation_appearance_schema.get_coordinate_values.source"
the <<express:geometric_model_schema.tessellated_face,tessellated_face>>, <<express:geometric_model_schema.tessellated_shell,tessellated_shell>>, <<express:geometric_model_schema.tessellated_solid,tessellated_solid>>, or <<express:geometric_model_schema.tessellated_surface_set,tessellated_surface_set>>, for which the <<express:geometric_model_schema.coordinates_list,coordinates_list>> is required.
*)


(*"presentation_appearance_schema.__schema_file"
data/resource_docs/visual_presentation/resource.xml
*)
