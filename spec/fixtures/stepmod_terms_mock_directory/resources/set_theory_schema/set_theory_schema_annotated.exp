(*
$Id: set_theory_schema.exp,v 1.10 2014/03/04 00:30:41 thomasrthurman Exp $
ISO 10303 TC184/SC4/WG12 N3213

EXPRESS Source:
ISO 10303-54 ed1 Classification and set theory - Set theory schema

The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
and derivations of the Schema:

Copyright ISO 2014  All rights reserved
Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
subject to the following conditions:

THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
USE OR OTHER DEALINGS IN THE SCHEMA.

In addition, any modified copy of the Schema shall include the following notice:

THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
ISO 10303-54 ed1 Classification and set theory - Set theory schema
AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
*)

SCHEMA set_theory_schema '{iso standard 10303 part(54) version(1) object(1) set_theory_schema(2)}';

REFERENCE FROM classification_schema   -- ISO 10303-54
  (class); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (identifier,
   label,
   text); 


ENTITY complement;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  set_1 : class;
  set_2 : class;
  universe : class;
WHERE
  complement_different: NOT identical_sets(set_1, set_2);
END_ENTITY;

ENTITY intersection;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  operand : SET[2:?] OF class;
  resultant : class;
END_ENTITY;

ENTITY power_set;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  base : class;
  derived : class;
WHERE
  derived_different: NOT identical_sets(base, derived);
END_ENTITY;

ENTITY proper_subset
  SUBTYPE OF (subset);
WHERE
  subset_different: NOT identical_sets(superset, subset);
END_ENTITY;

ENTITY same_membership;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  set_1 : class;
  set_2 : class;
END_ENTITY;

ENTITY subset;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  subset : class;
  superset : class;
END_ENTITY;

ENTITY union;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  operand : SET[2:?] OF class;
  resultant : class;
END_ENTITY;

ENTITY union_of_all_members;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  operand : class;
  resultant : class;
WHERE
  resultant_different: NOT identical_sets(operand, resultant);
END_ENTITY;

FUNCTION identical_sets
 (set_a : class; set_b : class) : BOOLEAN; 
  LOCAL
    set_of_sets : SET OF class := [];
  END_LOCAL;
  
  IF (set_a = set_b) THEN
    RETURN (TRUE);
  END_IF;
  
  set_of_sets := set_of_sets + set_b;
  RETURN (identical_to_one_of_set_of_sets(set_a, set_of_sets));
      END_FUNCTION; 

FUNCTION identical_to_one_of_set_of_sets
 (set_a : class; set_of_sets : SET OF class) : BOOLEAN; 
  LOCAL
    i                            : INTEGER;
    initial_size                 : INTEGER;
    augmented_size               : INTEGER;
    set_of_forward_equivalences  : SET OF same_membership := [];
    set_of_backward_equivalences : SET OF same_membership := [];
    augmented_set_of_sets        : SET OF class := [];
  END_LOCAL;
  
  --  test membership of the specified set of sets
  
  IF (set_a IN set_of_sets) THEN
    RETURN (TRUE);
  END_IF;
  
  --  extend the specified set to include all sets that have the same membership
  --  as an existing member
  
  initial_size := SIZEOF(set_of_sets);
  IF (initial_size = 0) THEN
    RETURN (FALSE);
  END_IF;
  REPEAT i := 1 TO initial_size;
    set_of_forward_equivalences := set_of_forward_equivalences +
      USEDIN(set_of_sets[i], 'SET_THEORY_SCHEMA.SAME_MEMBERSHIP.SET_1');
    set_of_backward_equivalences := set_of_forward_equivalences +
      USEDIN(set_of_sets[i], 'SET_THEORY_SCHEMA.SAME_MEMBERSHIP.SET_2');
  END_REPEAT;
  
  augmented_set_of_sets := set_of_sets;
  IF (SIZEOF(set_of_forward_equivalences) > 0) THEN
    REPEAT i := 1 to HIINDEX(set_of_forward_equivalences);
      augmented_set_of_sets := augmented_set_of_sets +
        set_of_forward_equivalences[i].set_2;
    END_REPEAT;
  END_IF;
  IF (SIZEOF(set_of_backward_equivalences) > 0) THEN
    REPEAT i := 1 to HIINDEX(set_of_backward_equivalences);
      augmented_set_of_sets := augmented_set_of_sets +
        set_of_backward_equivalences[i].set_1;
    END_REPEAT;
  END_IF;
  
  -- if the specified set of sets has been augmented, then test membership
  
  augmented_size := SIZEOF(augmented_set_of_sets);
  IF augmented_size = initial_size THEN
    RETURN (FALSE);
  END_IF;
  
  RETURN (identical_to_one_of_set_of_sets(set_a, augmented_set_of_sets));
      END_FUNCTION; 

END_SCHEMA;  -- set_theory_schema

(*"set_theory_schema.complement"
A *complement* is a relationship that is between

* set S1,
* set U, and
* set S2,

that indicates set S2 consists of all members of U that are not members of S1.
*)



(*"set_theory_schema.complement.id"
the <<express:support_resource_schema.identifier,identifier>> for the complement relationship.
*)



(*"set_theory_schema.complement.name"
the <<express:support_resource_schema.label,label>> by which the *complement* relationship is known.
*)



(*"set_theory_schema.complement.description"
the <<express:support_resource_schema.text,text>> that characterizes the complement relationship. The value of this attribute need not be specified.
*)



(*"set_theory_schema.complement.set_1"
the class that has *set_2* as its complement within *universe*.
*)



(*"set_theory_schema.complement.set_2"
the class that has *set_1* as its complement within *universe*.
*)



(*"set_theory_schema.complement.wr:complement_different"
a class shall not be explicitly stated to be identical to its complement.
*)



(*"set_theory_schema.complement.universe"
the class that is the union of *set_1* and *set_2*.
*)



(*"set_theory_schema.intersection"
An *intersection* is a relationship that is between

* set R and
* set of sets {Si},

that indicates set R consists of each thing that is a member of each set within {Si}.
*)



(*"set_theory_schema.intersection.id"
the <<express:support_resource_schema.identifier,identifier>> for the intersection relationship.
*)



(*"set_theory_schema.intersection.name"
the <<express:support_resource_schema.label,label>> by which the *intersection* relationship is known..
*)



(*"set_theory_schema.intersection.description"
the <<express:support_resource_schema.text,text>> that characterizes the *intersection* relationship. The value of this attribute need not be specified.
*)



(*"set_theory_schema.intersection.operand"
the set of sets that have the resultant as their intersection.
*)



(*"set_theory_schema.intersection.resultant"
the set that consists of each thing that is a member of each set within the operand.
*)



(*"set_theory_schema.power_set"
A *power_set* is a relationship that is between

* set S and
* set S*, 

that indicates S* is the set of all subsets of S.
*)



(*"set_theory_schema.power_set.__example"
Consider the following three instances of class:



*  'pump' - a class that has individual pumps as members;
*  'commodity class' - a class that has commodity classes used for procurement as members;
*  'pump commodity class' - a class that has commodity classes used for procurement of pumps.



'Pump commodity class' is the intersection of 'commodity class' and the *power_set* of 'pump'.
*)


(*"set_theory_schema.power_set.id"
the <<express:support_resource_schema.identifier,identifier>> for the *power_set* relationship.
*)



(*"set_theory_schema.power_set.name"
the <<express:support_resource_schema.label,label>> by which the *power_set* relationship is known.
*)



(*"set_theory_schema.power_set.description"
the <<express:support_resource_schema.text,text>> that characterizes the *power_set* relationship. The value of this attribute need not be specified.
*)



(*"set_theory_schema.power_set.base"
the set whose *power_set* is the *derived* set.
*)



(*"set_theory_schema.power_set.base.__note"
The base is the union of the *derived*.
*)


(*"set_theory_schema.power_set.derived"
the set of all subsets of the *base*.
*)



(*"set_theory_schema.power_set.wr:derived_different"
A <<express:classification_schema.class,class>> shall not be explicitly stated to be identical to the <<express:classification_schema.class,class>> from which it is derived as power set.
*)



(*"set_theory_schema.proper_subset"
A *proper_subset* is a type of <<express:set_theory_schema.subset,subset>> that is a relationship between

* set A and
* set B,

that indicates the following:

* each member of set A is also a member of set B;
* set A does not equal set B.
*)



(*"set_theory_schema.proper_subset.wr:subset_different"
a <<express:classification_schema.class,class>> that is a proper subset shall not be explicitly stated to be identical to its superset.
*)



(*"set_theory_schema.same_membership"
A *same_membership* is a relationship that is between

* set S1 and
* set S2,

that indicates the sets have the same members. Hence, set S1 and set S1 are the same set.
*)



(*"set_theory_schema.same_membership.id"
the <<express:support_resource_schema.identifier,identifier>> for the *same_membership* relationship.
*)



(*"set_theory_schema.same_membership.name"
the <<express:support_resource_schema.label,label>> by which the *same_membership* relationship is known.
*)



(*"set_theory_schema.same_membership.description"
the <<express:support_resource_schema.text,text>> that characterizes the *same_membership* relationship. The value of this attribute need not be specified.
*)



(*"set_theory_schema.same_membership.set_1"
the <<express:classification_schema.class,class>> that contains the same members as *set_2*.
*)



(*"set_theory_schema.same_membership.set_2"
the <<express:classification_schema.class,class>> that contains the same members as *set_1*.
*)



(*"set_theory_schema.subset"
A *subset* is a relationship that is between

* set A and 
* set B,

that indicates each member of set A is also a member of set B.
*)



(*"set_theory_schema.subset.__note"
Set A may be equal to B.
*)


(*"set_theory_schema.subset.id"
the <<express:support_resource_schema.identifier,identifier>> for the subset relationship.
*)



(*"set_theory_schema.subset.name"
the <<express:support_resource_schema.label,label>> by which the *subset* relationship is known.
*)



(*"set_theory_schema.subset.description"
the <<express:support_resource_schema.text,text>> that characterizes the subset relationship. The value of this attribute need not be specified.
*)



(*"set_theory_schema.subset.subset"
the <<express:classification_schema.class,class>> that contains only members of superset.
*)



(*"set_theory_schema.subset.superset"
the <<express:classification_schema.class,class>> that contains all members of subset.
*)



(*"set_theory_schema.union"
A *union* is a relationship that is between

* set R and 
* set of sets {Si},

that indicates set R consists of each thing that is a member of a set within {Si}.
*)



(*"set_theory_schema.union.id"
the <<express:support_resource_schema.identifier,identifier>> for the *union* relationship.
*)



(*"set_theory_schema.union.name"
the <<express:support_resource_schema.label,label>> by which the *union* relationship is known.
*)



(*"set_theory_schema.union.description"
the <<express:support_resource_schema.text,text>> that characterizes the *union* relationship. The value of this attribute need not be specified.
*)



(*"set_theory_schema.union.operand"
the set of sets that have the *resultant* as their *union*.
*)



(*"set_theory_schema.union.resultant"
the set that consists of each thing that is a member of a set within the operand.
*)



(*"set_theory_schema.union_of_all_members"
A *union_of_all_members* is a relationship that is between

* set R and
* sets S, 

where each of the members of S is a set, that indicates set R consists of each thing that is a member of a set within S.
*)



(*"set_theory_schema.union_of_all_members.__example"
Consider the class that is the temperature range 10 to 20 degrees Celsius. A temperature such as 15 degrees Celsius is a member of the range.



The temperature 15 degrees Celsius is a member of the class that is the temperature range 10 to 20 degrees Celsius.



The class that consists of all objects with a thermodynamic energy in the range 15 to 20 degrees Celsius is the *union_of_all_members* of the temperature range 10 to 20 degrees Celsius.
*)


(*"set_theory_schema.union_of_all_members.__note"
The entity *union_of_all_members* is equivalent to <<express:set_theory_schema.union,union>>, and is used where the <<express:set_theory_schema.union_of_all_members.operand,operand>> set has a large or infinite number of members.
*)


(*"set_theory_schema.union_of_all_members.description"
the <<express:support_resource_schema.text,text>> that characterizes the *union_of_all_members* relationship. The value of this attribute need not be specified.
*)



(*"set_theory_schema.union_of_all_members.id"
the <<express:support_resource_schema.identifier,identifier>> for the *union_of_all_members* relationship.
*)



(*"set_theory_schema.union_of_all_members.name"
the <<express:support_resource_schema.label,label>> by which the *union_of_all_members* relationship is known.
*)



(*"set_theory_schema.union_of_all_members.operand"
the set of sets that have the <<express:set_theory_schema.union_of_all_members.resultant,resultant>> as their <<express:set_theory_schema.union,union>>.
*)



(*"set_theory_schema.union_of_all_members.resultant"
the set that consists of each thing that is a member of a set within the operand.
*)



(*"set_theory_schema.union_of_all_members.wr:resultant_different"
a <<express:classification_schema.class,class>> that is the <<express:set_theory_schema.union,union>> of a set of other classes shall not be explicitly stated to be identical to the set of classes.
*)



(*"set_theory_schema.identical_sets"
An *identical_sets* tests whether two instances of class are the same, or are explicitly stated to be the same by a chain of one or more instances of <<express:set_theory_schema.same_membership,same_membership>>.
*)



(*"set_theory_schema.identical_sets.set_a"
an instance of <<express:classification_schema.class,class>> that is tested against *set_b*.
*)



(*"set_theory_schema.identical_sets.set_b"
an instance of <<express:classification_schema.class,class>> that is tested against *set_a*.
*)



(*"set_theory_schema.identical_to_one_of_set_of_sets"
An *identical_to_one_of_set_of_sets* tests whether an instance of <<express:classification_schema.class,class>> is the same also a member of a set of sets, or is explicitly stated to be the same as a member of a set of sets by a chain of one or more instances of <<express:set_theory_schema.same_membership,same_membership>>.
*)



(*"set_theory_schema.identical_to_one_of_set_of_sets.set_a"
an instance of <<express:classification_schema.class,class>> that is tested against *set_of_sets*.
*)



(*"set_theory_schema.identical_to_one_of_set_of_sets.set_of_sets"
a set of instances of <<express:classification_schema.class,class>> that are tested against set.
*)


