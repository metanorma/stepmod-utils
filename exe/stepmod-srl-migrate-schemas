#!/usr/bin/env ruby

# encoding: UTF-8

require "fileutils"
# resolve bin path, ignoring symlinks
require "pathname"
bin_file = Pathname.new(__FILE__).realpath

# add self to libpath
$:.unshift File.expand_path("../../lib", bin_file)

# Fixes https://github.com/rubygems/rubygems/issues/1420
require "rubygems/specification"

module Gem
  class Specification
    def this; self; end
  end
end

require "bundler/setup"
require "optparse"

def log(message, indent = 0)
  indent_spaces = " " * (indent * 2)
  puts "[stepmod-utils] #{indent_spaces}#{message}"
end

def copy_files_to_schemas(path, output_dir)
  schema_name = path.dirname.basename
  file_name = path.basename

  new_dir = File.join(output_dir, schema_name)
  new_file_path = File.join(new_dir, file_name.to_s.gsub("_annotated.exp", ".exp"))

  unless Dir.exist?(new_dir)
    FileUtils.mkdir_p(new_dir)
  end

  FileUtils.copy_file(path, new_file_path)
  log("Copied #{path.basename} to #{new_file_path}", 1)
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"

  opts.on(
    "--stepmod-data-dir STEPMOD_DATA_DIR",
    String,
    "Path to STEPmod data directory",
  ) do |path|
    options[:stepmod_dir] = path
  end

  opts.on(
    "--srl-schemas-dir SRL_SCHEMAS_DIR",
    String,
    "Path to output srl schemas",
  ) do |path|
    options[:srl_output_schemas_dir] = path
  end

  opts.on(
    "-s",
    "--stepmod2mn-executeable STEPMOD2MN_EXECUTEABLE",
    String,
    "Path to STEPMOD2MN_EXECUTEABLE",
  ) do |path|
    options[:stepmod2mn_path] = path
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

stepmod2mn_path = options[:stepmod2mn_path]
if stepmod2mn_path.nil?
  raise StandardError.new(
    "stepmod2mn executeable is required, set with the `-s` option.",
  )
else
  log "stepmod2mn executeable path: `#{stepmod2mn_path}`"
end

stepmod_dir = options[:stepmod_dir] || "stepmod/data"
log "STEPmod data path: `#{stepmod_dir}`"

srl_output_schemas_dir = options[:srl_output_schemas_dir] || "schemas"
unless File.directory?(srl_output_schemas_dir)
  FileUtils.mkdir_p(srl_output_schemas_dir)
end
log "SRL output schemas directory path: `#{srl_output_schemas_dir}`"

# run stepmod2mn to migrate the EXPRESS-G files (the *.svg files),
# place them in {srl-schemas-dir}/{schema-name}/*.svg
system "java -Xss5m -jar #{stepmod2mn_path} #{stepmod_dir} --output #{srl_output_schemas_dir} --svg"

# run stepmod-annotate-all to create *_annotated.exp files
# (but name them *.exp without the _annotated suffix)
system "stepmod-annotate-all #{stepmod_dir}"

# place them in {srl-schemas-dir}/{schema-name}/*.exp
Dir.glob("#{stepmod_dir}/data/**/*_annotated.exp").each do |filepath|
  path = Pathname.new(filepath)
  copy_files_to_schemas(path, srl_output_schemas_dir)
end

# stepmod-extract-changes to create *.yaml files for schema change information,
system "stepmod-extract-changes -p #{stepmod_dir}"

# place them in {srl-schemas-dir}/{schema-name}/*.yaml
Dir.glob("#{stepmod_dir}/data/**/*.changes.yaml").each do |filepath|
  path = Pathname.new(filepath)
  copy_files_to_schemas(path, srl_output_schemas_dir)
end

log("Done")
