#!/usr/bin/env ruby

require 'json'
require 'stepmod/utils/smrl_description_converter'
require 'stepmod/utils/smrl_resource_converter'

express_file = ARGV.shift
resource_docs_cache_file = ARGV.shift # output of ./stepmod-build-resource-docs-cache
stepmod_dir = ARGV.first || Dir.pwd

match = File.basename(express_file).match('^(arm|mim|bom)\.exp$')
descriptions_base = match ? "#{match.captures[0]}_descriptions.xml" : 'descriptions.xml'
descriptions_file = File.join(File.dirname(express_file), descriptions_base)

output_express = File.read(express_file)

resource_docs_cache = JSON.parse(File.read(resource_docs_cache_file))

if File.exists?(descriptions_file)
  descriptions = Nokogiri::XML(File.read(descriptions_file)).root
  descriptions.xpath('ext_description').each do |description|
    unless description.text.strip.empty? then
      wrapper = "<ext_descriptions>#{description.to_s}</ext_descriptions>"
      output_express << "\n" + Stepmod::Utils::SmrlDescriptionConverter.convert(wrapper)
    else
      # remark is empty, fallback to resource_docs_cache
      resource_docs_dir = resource_docs_cache[description['linkend']]
      if resource_docs_dir
        resource_docs_file = File.join(stepmod_dir, 'data/resource_docs', resource_docs_dir, 'resource.xml')
        resource_docs = Nokogiri::XML(File.read(resource_docs_file)).root
        schema = resource_docs.xpath("schema[@name='#{description['linkend']}']")

        wrapper = "<resource>#{schema.to_s}</resource>"
        output_express << "\n" + Stepmod::Utils::SmrlResourceConverter.convert(wrapper)
      end
    end
  end
end

puts output_express